{
    "project": {
        "name": "Suggester",
        "description": "Turn a text input into a Facebook-style multiple-tag input. Lots of options and event hooks.",
        "version": "1.1.0",
        "url": "https://github.com/kensnyder/jQuery-Suggester"
    },
    "files": {
        "src/Suggester.js": {
            "name": "src/Suggester.js",
            "modules": {
                "jQuery": 1
            },
            "classes": {
                "Suggester": 1,
                "Suggester.Tag": 1
            },
            "fors": {},
            "namespaces": {
                "Suggester": 1
            }
        }
    },
    "modules": {
        "jQuery": {
            "name": "jQuery",
            "submodules": {},
            "classes": {
                "Suggester": 1,
                "Suggester.Tag": 1
            },
            "fors": {},
            "namespaces": {
                "Suggester": 1
            },
            "tag": "module",
            "file": "src/Suggester.js",
            "line": 2123
        }
    },
    "classes": {
        "Suggester": {
            "name": "Suggester",
            "shortname": "Suggester",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jQuery",
            "namespace": "",
            "file": "src/Suggester.js",
            "line": 248,
            "is_constructor": 1,
            "example": [
                "\n\n\t// Instantiate the OOP way\n\tvar instance = new $.Suggester('selector', options)\n\t\t\n\t// Instantiate the jQuery way\n\t$('selector').suggester(options);\n\t// call methods on the instance\n\t$('selector').suggester('method', arg1, arg2);\n\t// initialize and get back instance\n\tvar instance = $('selector').suggester('getInstance');"
            ],
            "params": [
                {
                    "name": "$textInput",
                    "description": "The input element to convert into a widget",
                    "type": "String|jQuery|HTMLElement"
                },
                {
                    "name": "options",
                    "description": "See {{#crossLink \"Suggester/options:property\"}}options property{{/crossLink}} for full documentation",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "Suggester.defaultOptions"
                }
            ]
        },
        "Suggester.Tag": {
            "name": "Suggester.Tag",
            "shortname": "Suggester.Tag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jQuery",
            "namespace": "Suggester",
            "file": "src/Suggester.js",
            "line": 2123,
            "is_constructor": 1,
            "params": [
                {
                    "name": "properties",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "suggester",
                            "description": "The Suggester to which this tag belongs",
                            "type": "Suggester"
                        },
                        {
                            "name": "value",
                            "description": "The value of the tag",
                            "type": "String"
                        },
                        {
                            "name": "label",
                            "description": "The display text of the tag",
                            "type": "String"
                        },
                        {
                            "name": "index",
                            "description": "The index relative to other tags",
                            "type": "Number"
                        },
                        {
                            "name": "$hidden",
                            "description": "The hidden input element",
                            "type": "JQuery"
                        },
                        {
                            "name": "$tag",
                            "description": "The tag element",
                            "type": "JQuery"
                        },
                        {
                            "name": "record",
                            "description": "The record corresponding to this tag, if any",
                            "type": "Object|undefined"
                        }
                    ]
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "src/Suggester.js",
            "line": 25,
            "description": "Default options. Change these to globally change the default options\nSee {{#crossLink \"Suggester/constructor:method\"}}constructor{{/crossLink}} for documentation on each option",
            "itemtype": "property",
            "name": "defaultOptions",
            "static": 1,
            "type": "{Object}",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 84,
            "description": "The current options. Starts with value given in constructor",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "example": [
                "\n\t\n\t// EXAMPLE TEMPLATE CONFIG\t\t\n\t// change uls to divs and lis to spans\n\toptions.template = $.Suggester.defaultOptions.template\n\t\t.replace(/<(\\/)?ul/g, '<$1div')\n\t\t.replace(/<(\\/)?li/g, '<$1span')\n\t;\n\t// custom list item template\n\toptions.listItemTemplate = '<li class=\"sugg-item\">{record.lname}, {record.fname} ({record.email})</li>';\t\n\t"
            ],
            "class": "Suggester",
            "module": "jQuery",
            "subprops": [
                {
                    "name": "data",
                    "description": "Initial data to use for suggestions",
                    "type": "Array|Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "valueProperty",
                    "description": "The name of object property that should be used as the tag's value. Only applicable when options.data is set",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"value\""
                },
                {
                    "name": "labelProperty",
                    "description": "The name of object property that should be used as the tag's display text. Only applicable when options.data is set",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"value\""
                },
                {
                    "name": "searchProperties",
                    "description": "The array of object property names that should be searched when generating suggestions. Only applicable when options.data is set",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "Array(\"value\")"
                },
                {
                    "name": "matchAt",
                    "description": "Where to match when finding suggestions. It can be \"anywhere\", \"start\", \"end\" or an integer. Only applicable when options.data is set",
                    "type": "String|Number",
                    "optional": true,
                    "optdefault": "\"anywhere\""
                },
                {
                    "name": "caseSensitive",
                    "description": "If true, find matches regardless of case. Only applicable when options.data is set. Only applicable when options.data is set",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "dataUrl",
                    "description": "Url to call to get json or jsonp results. Use %s to indicate where search text should be inserted. e.g. \"http://example.com/myjson?query=%s\" or \"http://example.com/myjsonp?query=%s&callback=%s\"",
                    "type": "String",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "dataType",
                    "description": "Can be \"json\" or \"jsonp\". If json, options.dataUrl needs to be in the format \"http://example.com/myjsonp?query=%s&mycallback=%s\". To handle xml, you'll need to register BeforeFetch and AfterFetch handlers or overwrite the fetchResults method",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"json\""
                },
                {
                    "name": "fly",
                    "description": "Which way should the suggestion box fly. If \"up\", the suggestion box will appear before the input box in the DOM tree. A css class of \"sugg-fly-up\" or \"sugg-fly-down\" is applied to the widget element based on this value",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"down\""
                },
                {
                    "name": "suggListPosition",
                    "description": "If \"absolute\", the suggestion box will be appended to <body> and positioned and sized each time it is opened. This is useful for widgets within table elements",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"relative\""
                },
                {
                    "name": "multiselect",
                    "description": "If true, allow multiple tags",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "preventDuplicates",
                    "description": "If true, the first tag will be removed when a duplicate is typed in",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "omitAlreadyChosenItems",
                    "description": "If true, don't suggest items that have already been chosen as tags. Only applicable when options.data is set",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "minChars",
                    "description": "The minimum number of characters a user must type before the suggestion box will appear. If 0, show choices when input is simply focused (like a faux select widget)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "3"
                },
                {
                    "name": "keyDelay",
                    "description": "The number of milliseconds between keystrokes before the suggestion lookup begins",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "400"
                },
                {
                    "name": "addOnComma",
                    "description": "If true, typing a comma will add the current text as a tag",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "addOnTab",
                    "description": "If true, typing a tab will add the current text as a tag",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "addOnSemicolon",
                    "description": "If true, typing a semicolon will add the current text as a tag",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "addOnSubmit",
                    "description": "If true, add tag on submit if user has entered text but not typed comma or tab",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "addOnBlur",
                    "description": "If true, add tag on blur if user has entered text but not typed comma or tab",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "submitOnEnter",
                    "description": "If false, prevent the form from submitting when the user presses enter on the empty input",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "inputSize",
                    "description": "Manually set the input size property to a certain width. If auto, set size to text width",
                    "type": "String",
                    "optional": true,
                    "optdefault": "auto"
                },
                {
                    "name": "placeholder",
                    "description": "Placeholder text to display when no tags are present. e.g. \"Enter tags...\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "emptyText",
                    "description": "Message to show when there are no suggestions - default is \"(Type a comma to create a new item)\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "prompt",
                    "description": "Message to display in suggestion list when below min char length",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "maxSuggestions",
                    "description": "Only display this many suggestions",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "10"
                },
                {
                    "name": "addHiddenInputs",
                    "description": "If true, also add a hidden input for each tag (fieldname_tag[]) for easier server-side processing (See options.hiddenName to create a custom name)",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "hiddenName",
                    "description": "The name to use for hidden elements (defaults to the original input's name plus \"_tags[]\")",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "highlightSubstring",
                    "description": "If true, wrap first matching substring in each suggestion with <strong class=\"sugg-match\"></strong>",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "template",
                    "description": "The html used to generate the widget. You can add more markup, change tag names, or add css classes, but all the sugg-* classes need to remain. See below for default.\n\t\n\t<div class=\"sugg-widget\"> <!-- this.$widget -->\t\t\n\t\t<ul class=\"sugg-box\"> <!-- this.$box -->\n\t\t\t<li class=\"sugg-box-item sugg-tag\">  <!-- this.$tagTemplate -->\n\t\t\t\t<span class=\"sugg-label\">TAG TEXT GOES HERE</span><span class=\"sugg-remove\" title=\"Click to remove\">&times;</span>\n\t\t\t</li>\n\t\t\t<li class=\"sugg-box-item sugg-input-wrapper\"> <!-- this.$inputWrapper -->\n\t\t\t\t<input type=\"text\" class=\"sugg-input\" value=\"\" autocomplete=\"off\" /> <!-- this.$input -->\n\t\t\t</li>\n\t\t</ul>\n\t\t<div class=\"sugg-list-wrapper\">\n\t\t\t<ul class=\"sugg-list\" style=\"display:none\"> <!-- this.$suggList -->\n\t\t\t\t<li class=\"sugg-item {record.cssClass}\">{record.value}</li> <!-- innerHTML is used as this.listItemTemplate unless options.listItemTemplate is set -->\n\t\t\t\t<li class=\"sugg-empty\"></li> <!-- this.$empty -->\n\t\t\t\t<li class=\"sugg-prompt\"></li> <!-- this.$prompt -->\n\t\t\t</ul>\n\t\t</div>\n\t</div>",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "listItemTemplate",
                    "description": "Override the .sugg-item element in options.template",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "theme",
                    "description": "The css class to add to widget (e.g. \"sugg-theme-coolblue\"). The following themes come predefined in the CSS: \"coolblue\", \"faceblue\", \"graybox\", \"grayred\"",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"coolblue\""
                },
                {
                    "name": "onBeforeRender",
                    "description": "See the {{#crossLink \"Suggester/BeforeRender:event\"}}BeforeRender event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onInitialize",
                    "description": "See Suggester#initialize()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeHandleKey",
                    "description": "see Suggester#_onKeydown()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterHandleKey",
                    "description": "see Suggester#_onKeydown()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeAjax",
                    "description": "see Suggester#fetchResults()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeFetch",
                    "description": "see Suggester#_beforeFetch()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterFetch",
                    "description": "see Suggester#_afterFetch()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeMove",
                    "description": "see Suggester#moveSelection()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterMove",
                    "description": "see Suggester#moveSelection()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeSuggest",
                    "description": "see Suggester#handleSuggestions()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterSuggest",
                    "description": "see Suggester#handleSuggestions()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeOpen",
                    "description": "see Suggester#openSuggstBox()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterOpen",
                    "description": "see Suggester#openSuggestBox()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeClose",
                    "description": "see Suggester#closeSuggestBox()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterClose",
                    "description": "see Suggester#closeSuggestBox()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeFormat",
                    "description": "see Suggester#_formatSuggestion()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterFormat",
                    "description": "see Suggester#_formatSuggestion()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeFilter",
                    "description": "see Suggester#getResults()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterFilter",
                    "description": "see Suggester#getResults()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeAdd",
                    "description": "see Suggester#add()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterAdd",
                    "description": "see Suggester#add()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeRemove",
                    "description": "see Suggester#remove()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterRemove",
                    "description": "see Suggester#remove()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeSave",
                    "description": "see Suggester#save()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterSave",
                    "description": "see Suggester#save()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeSubmit",
                    "description": "see Suggester#_onSubmit()",
                    "type": "Function",
                    "optional": true
                }
            ]
        },
        {
            "file": "src/Suggester.js",
            "line": 176,
            "description": "The input used to make the widget",
            "itemtype": "property",
            "name": "$originalInput",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 180,
            "description": "Array of static data used instead of an ajax call",
            "itemtype": "property",
            "name": "data",
            "type": "Object[]",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 184,
            "description": "An array of Suggester.Tag objects",
            "itemtype": "property",
            "name": "tags",
            "type": "Suggester.Tag[]",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 188,
            "description": "The name to use for hidden elements (defaults to the original input's name plus \"_tags[]\")",
            "itemtype": "property",
            "name": "hiddenName",
            "type": "String",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 192,
            "description": "The tag that is selected for deletion",
            "itemtype": "property",
            "name": "$focusedTag",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 196,
            "description": "The item currently selected in the suggestion box",
            "itemtype": "property",
            "name": "$currentItem",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 200,
            "description": "The publish and subscribe handle - equal to $(this)",
            "itemtype": "property",
            "name": "pubsub",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 204,
            "description": "The element that wraps the widget",
            "itemtype": "property",
            "name": "$widget",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 208,
            "description": "The container that holds the chosen tags",
            "itemtype": "property",
            "name": "$box",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 212,
            "description": "The tag element that is cloned to make new tags",
            "itemtype": "property",
            "name": "$tagTemplate",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 216,
            "description": "The input that users type in",
            "itemtype": "property",
            "name": "$input",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 220,
            "description": "The container for the input",
            "itemtype": "property",
            "name": "$inputWrapper",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 224,
            "description": "The suggestion list element",
            "itemtype": "property",
            "name": "$suggList",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 228,
            "description": "The element that is positioned relatively to hold the absolutely positioned suggestion list",
            "itemtype": "property",
            "name": "$suggListWrapper",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 232,
            "description": "The html to use for suggestion list items",
            "itemtype": "property",
            "name": "listItemTemplate",
            "type": "String",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 236,
            "description": "The search term we are currently searching for",
            "itemtype": "property",
            "name": "_searchTerm",
            "type": "String",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 240,
            "description": "The text in the input box that will be used to fetch results (i.e. what the user just typed)",
            "itemtype": "property",
            "name": "_text",
            "type": "String",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 244,
            "description": "The jQuery XHR object used initilized for fetching data - http://api.jquery.com/jQuery.ajax/#jqXHR",
            "itemtype": "property",
            "name": "_jqXHR",
            "type": "JqXHR",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 303,
            "description": "Called after widget is initialized and rendered",
            "itemtype": "event",
            "name": "Initialize",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 310,
            "description": "Completely remove Suggester widget and replace with original input box (with values populated)",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "keepHiddenInputs",
                            "description": "If true, append all hidden inputs after the original input",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The original input",
                "type": "JQuery"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 338,
            "description": "Add a tag by a record",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "value",
                    "description": "the tag to add",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "the text to display in the new tag",
                    "type": "String",
                    "optional": true,
                    "optdefault": "value"
                },
                {
                    "name": "$item",
                    "description": "Set internally when the record is added by choosing from the suggestion box",
                    "type": "JQuery",
                    "optional": true
                }
            ],
            "return": {
                "description": "The jQuery object containing the newly created label or undefined if one was not created",
                "type": "JQuery"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 352,
            "description": "Fired before a tag is added",
            "itemtype": "event",
            "name": "BeforeAdd",
            "params": [
                {
                    "name": "value",
                    "description": "The tag to be added (writeable)",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "The value of the tag to be added (writeable)",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "The suggestion that was chosen, if any (writeable)",
                    "type": "JQuery"
                },
                {
                    "name": "record",
                    "description": "The record that was chosen, if any (writeable)",
                    "type": "Object"
                }
            ],
            "ifprevented": "The tag is not added",
            "example": [
                "       \n\t\t\t \n\tinstance.bind('BeforeAdd', function(event) {\n\t\tif (isSwearWord(evt.value)) {\n\t\t\tevent.preventDefault();\n\t\t\talert('Tags cannot be swear words');\n\t\t}\n\t});"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 410,
            "description": "Allows you to take action after a tag is added",
            "itemtype": "event",
            "name": "AfterAdd",
            "params": [
                {
                    "name": "item",
                    "description": "The suggestion that was chosen, if any",
                    "type": "JQuery"
                },
                {
                    "name": "tag",
                    "description": "The jQuery element of the tag that was added",
                    "type": "JQuery"
                },
                {
                    "name": "hidden",
                    "description": "The hidden input that was generated",
                    "type": "JQuery"
                },
                {
                    "name": "value",
                    "description": "The value of the tag",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "The the label of the tag",
                    "type": "String"
                },
                {
                    "name": "record",
                    "description": "The record that was chosen, if any",
                    "type": "String"
                }
            ],
            "example": [
                "\n\t\t\t \n\tinstance.bind('AfterAdd', function(event) {\n\t\t// fade in tag\n\t\tevent.tag.fadeIn(500);\n\t});"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 436,
            "description": "Add a tag with the contents of the input; e.g. when the user has typed something but clicks on another part of the form\nNote: this happens on blur when this.options.addOnBlur is true",
            "itemtype": "method",
            "name": "addCurrentBuffer",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 448,
            "description": "Move the selection up or down in the suggestion box",
            "itemtype": "method",
            "name": "moveSelection",
            "params": [
                {
                    "name": "direction",
                    "description": "Either \"up\" or \"down\"",
                    "type": "String",
                    "optional": true,
                    "optdefault": "up"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 465,
            "description": "Fire in response to up or down arrow while suggestion list is focused",
            "itemtype": "event",
            "name": "BeforeMove",
            "params": [
                {
                    "name": "direction",
                    "description": "\"up\" or \"down\"",
                    "type": "String"
                },
                {
                    "name": "current",
                    "description": "jQuery object with the currently selected item or null if there isn't one (writeable)",
                    "type": "JQuery|null"
                },
                {
                    "name": "next",
                    "description": "jQuery object with the item that will be selected next (writeable)",
                    "type": "JQuery|null"
                }
            ],
            "ifprevented": "Movement is cancelled",
            "example": [
                "\n\n\tinstance.bind('BeforeMove', function(event) {\n\t\talert('The new selection will be ' + event.next.text());\n\t});\n\t\t\t"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 519,
            "description": "Select a suggestion",
            "itemtype": "method",
            "name": "selectItem",
            "params": [
                {
                    "name": "$tag",
                    "description": "",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 529,
            "description": "Deselect a suggestion",
            "itemtype": "method",
            "name": "deselectItem",
            "params": [
                {
                    "name": "$tag",
                    "description": "",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 539,
            "description": "Deselect all suggestions",
            "itemtype": "method",
            "name": "deselectAllItems",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 549,
            "description": "Open suggestion list for the given text",
            "itemtype": "method",
            "name": "suggest",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 564,
            "description": "Add more data records to the autosuggest list. Does not apply when dataUrl is set",
            "itemtype": "method",
            "name": "addData",
            "params": [
                {
                    "name": "data",
                    "description": "More records in the same object format as initially set",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 584,
            "description": "Set data records to the autosuggest list. Does not apply when dataUrl is set",
            "itemtype": "method",
            "name": "setData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 595,
            "description": "Get all the records in the autosuggest list. Does not apply when dataUrl is set",
            "itemtype": "method",
            "name": "getData",
            "return": {
                "description": "",
                "type": "Object[]"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 603,
            "description": "Set the direction of the suggestion menu, to fly upwards or downwards",
            "itemtype": "method",
            "name": "setFlyDirection",
            "params": [
                {
                    "name": "direction",
                    "description": "either \"up\" or \"down\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 622,
            "description": "Focus on a previously added tag",
            "itemtype": "method",
            "name": "focusTag",
            "params": [
                {
                    "name": "$tag",
                    "description": "The .sugg-tag element to focus",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 635,
            "description": "Unfocus the previously focussed tag",
            "itemtype": "method",
            "name": "unfocusTag",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 648,
            "description": "Remove the focused tag",
            "itemtype": "method",
            "name": "removeFocusedTag",
            "params": [
                {
                    "name": "evt",
                    "description": "(optional)  Used to check if $document keypress is backspace or delete",
                    "type": "jQuery.Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 665,
            "description": "Remove a tag given its text or jQuery element or HTML element",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "$tag",
                    "description": "the tag to remove",
                    "type": "String|jQuery|HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 691,
            "description": "Fired before a tag is removed",
            "itemtype": "event",
            "name": "BeforeRemove",
            "params": [
                {
                    "name": "tag",
                    "description": "The tag to be removed",
                    "type": "JQuery"
                },
                {
                    "name": "value",
                    "description": "The value of the tag to be removed (writeable)",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "The label of the tag to be removed",
                    "type": "String"
                }
            ],
            "ifprevented": "The tag will not be removed",
            "example": [
                "\n\t\t\t \n\tinstance.bind('BeforeRemove', function(event) {\n\t\tif (!confirm('Are you sure you want to remove the tag \"' + event.label + '\"?')) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t});\n\t\t\t "
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 717,
            "description": "Fired after a tag is removed",
            "itemtype": "event",
            "name": "AfterRemove",
            "params": [
                {
                    "name": "tag",
                    "description": "The tag element that was removed",
                    "type": "JQuery"
                },
                {
                    "name": "value",
                    "description": "The value of the tag that was removed",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "The label of the tag that was removed",
                    "type": "String"
                },
                {
                    "name": "The",
                    "description": "tag object that was removed",
                    "type": "Suggester.Tag"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 733,
            "description": "Find a suggestion record by text. Only applies when this.options.data is set.",
            "itemtype": "method",
            "name": "findRecord",
            "params": [
                {
                    "name": "text",
                    "description": "The text to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The matched record object or false if nothing matched.",
                "type": "Object|false"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 768,
            "description": "Initiate suggestion process if the input text is >= this.options.minChars, otherwise show prompt",
            "itemtype": "method",
            "name": "suggestIfNeeded",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 787,
            "description": "Show the prompt text to give a hint to users. Only called when there are no items and this.options.prompt is truthy",
            "itemtype": "method",
            "name": "showPrompt",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 801,
            "description": "Show text indicating there are no suggestions - defined in this.options.emptyText",
            "itemtype": "method",
            "name": "showEmptyText",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 816,
            "description": "Fetch suggestions from an ajax URL",
            "itemtype": "method",
            "name": "fetchResults",
            "params": [
                {
                    "name": "text",
                    "description": "The text to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The",
                "type": "JqXHR"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 839,
            "description": "Edit settings before ajax request is sent",
            "itemtype": "event",
            "name": "BeforeAjax",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings sent to $.ajax()",
                    "type": "Object"
                },
                {
                    "name": "term",
                    "description": "The term for which we will search",
                    "type": "String"
                }
            ],
            "ifcancelled": "Ajax is not run and this._afterFetch is run",
            "example": [
                "\n\t\t\t \n\tinstance.bind('BeforeAjax', function(event) {\n\t\tevent.settings.timeout = 5000;\n\t\tstartSpinner(event.term);\n\t});\t\t\t \n\t\t\t "
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 864,
            "description": "Access the jqXHR after initiating the ajax call but before it returns",
            "itemtype": "event",
            "name": "AfterAjax",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings sent to $.ajax()",
                    "type": "Object"
                },
                {
                    "name": "term",
                    "description": "The term which was searched",
                    "type": "String"
                },
                {
                    "name": "jqXHR",
                    "description": "The jquery XMLHttpRequest object",
                    "type": "JqXHR"
                }
            ],
            "example": [
                "\n\t\t\t \n\tinstance.bind('AfterAjax', function(event) {\n\t\tevent.jqXHR.done(stopSpinner);\t\n\t});\n\t\t\t "
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 884,
            "description": "Cancel the XHR. Used when user starts typing again before XHR completes",
            "itemtype": "method",
            "name": "abortFetch",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 896,
            "description": "Take the given records and build and display suggestion box. Usually only called internally.",
            "itemtype": "method",
            "name": "handleSuggestions",
            "params": [
                {
                    "name": "records",
                    "description": "The result records to use to build the suggestion list",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 917,
            "description": "Modify suggestion box behavior before it opens",
            "itemtype": "event",
            "name": "BeforeSuggest",
            "params": [
                {
                    "name": "text",
                    "description": "The text that was searched for"
                }
            ],
            "ifprevented": "The suggestion list is built but not displayed",
            "example": [
                "\n\n\tinstance.bind('BeforeSuggest', function(event) {\n\t\tif (evt.text == 'dont suggest') {\n\t\t\tevent.preventDefault(); // suggest box will not open\n\t\t}\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 939,
            "description": "Fires after displaying suggestions",
            "itemtype": "event",
            "name": "AfterSuggest",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 946,
            "description": "Return true if suggestion box is open",
            "itemtype": "method",
            "name": "isSuggestBoxOpen",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 954,
            "description": "Manually open the suggestion box in whatever state it is. Usually only called internally.",
            "itemtype": "method",
            "name": "openSuggestBox",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 982,
            "description": "Fires before suggestion box is displayed",
            "itemtype": "event",
            "name": "BeforeOpen",
            "ifprevented": "Box is not displayed",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1001,
            "description": "Fires after suggestion box is displayed",
            "itemtype": "event",
            "name": "AfterOpen",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1008,
            "description": "Hide the suggestion box",
            "itemtype": "method",
            "name": "closeSuggestBox",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1016,
            "description": "Fired before suggestion box is hidden",
            "itemtype": "event",
            "name": "BeforeClose",
            "ifprevented": "Suggestion box will stay open",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1028,
            "description": "Fired after suggestion box is hidden",
            "itemtype": "event",
            "name": "AfterClose",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1035,
            "description": "Focus cursor on text input box",
            "itemtype": "method",
            "name": "focus",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1046,
            "description": "Get suggestion result records given some text (local data)",
            "itemtype": "method",
            "name": "getResults",
            "params": [
                {
                    "name": "text",
                    "description": "Gather suggestions based on this text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of Objects of matching records",
                "type": "Array"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1054,
            "description": "Called before the search for results",
            "itemtype": "event",
            "name": "BeforeFilter",
            "params": [
                {
                    "name": "text",
                    "description": "The text to search for",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n\tinstance.bind('BeforeFilter', function(event) {\n\t\t// remove all special characters from input text\n\t\tevent.text = event.text.replace(/[^\\w ]/g, '');\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1099,
            "description": "Called after the search for results",
            "itemtype": "event",
            "name": "AfterFilter",
            "params": [
                {
                    "name": "text",
                    "description": "The that was searched for",
                    "type": "String"
                },
                {
                    "name": "results",
                    "description": "The array of records that matched (writeable)",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\n\tinstance.bind('AfterFilter', function(event) {\n\t\t// add a result onto the beginning\n\t\tevent.results.unshift({value:'Search the web for \"' + event.text '\"');\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1118,
            "description": "Clear all the chosen tags",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1133,
            "description": "Get a collection of all the chosen tag objects",
            "itemtype": "method",
            "name": "getTags",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1141,
            "description": "Iterate through each of the chosen tag objects",
            "itemtype": "method",
            "name": "eachTag",
            "params": [
                {
                    "name": "iterator",
                    "description": "The iterator function - function(i, tag) {}",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1152,
            "description": "Return a URL query string representing the hidden values of the input",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1165,
            "description": "Pluck all the tag values from the chosen tags",
            "itemtype": "method",
            "name": "getValues",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1177,
            "description": "Set the widget's CSS theme - Adds a class \"sugg-theme-%name%\" to the widget",
            "itemtype": "method",
            "name": "setTheme",
            "params": [
                {
                    "name": "themeName",
                    "description": "The name of the theme to use",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1192,
            "description": "Publish the given event name and send the given data",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event to publish",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Additional data to attach to the event object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The event object which behaves much like a DOM event object",
                "type": "jQuery.Event"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1208,
            "description": "Get this instance. Useful for jQuery-style usage:  var instance = $('input').suggester(options).suggester('getInstance')",
            "itemtype": "method",
            "name": "getInstance",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1216,
            "description": "Set options and interpret options",
            "itemtype": "method",
            "name": "_processOptions",
            "params": [
                {
                    "name": "options",
                    "description": "Settings passed to constructor",
                    "type": "Object"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1228,
            "description": "Render the widget and get handles to key elements",
            "itemtype": "method",
            "name": "_render",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1232,
            "description": "Fired after this.$widget is populated with this.options.template but before any sub elements are found",
            "itemtype": "event",
            "name": "BeforeRender",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1240,
            "description": "Modify this.$widget or any of its child elements before it is manipulated or appended. Can be used to modify this.options.template with DOM methods",
            "itemtype": "event",
            "name": "BeforeRender",
            "params": [
                {
                    "name": "A",
                    "description": "reference to this.$widget",
                    "type": "JQuery"
                }
            ],
            "example": [
                "\n\t\t\t \n\tinstance.bind('BeforeRender', function(event) {\n\t\tevent.widget.find('.sugg-remove').text('').appendChild(myRemoveImage);\n\t});\n\t\t\t "
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1314,
            "description": "Look at the initial element's start value and populate tags as appropriate",
            "itemtype": "method",
            "name": "_handleStartValue",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1334,
            "description": "Attach event handlers",
            "itemtype": "method",
            "name": "_setupListeners",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1364,
            "description": "Event handler for when this.$input is focused",
            "itemtype": "method",
            "name": "_onInputFocus",
            "params": [
                {
                    "name": "evt",
                    "description": "The focus event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1385,
            "description": "Event handler for when this.$input is blurred",
            "itemtype": "method",
            "name": "_onInputBlur",
            "params": [
                {
                    "name": "evt",
                    "description": "blur event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1405,
            "description": "Event handler for when .sugg-remove is clicked",
            "itemtype": "method",
            "name": "_onTagRemoveClick",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1417,
            "description": "Event handler for when .sugg-tag is clicked",
            "itemtype": "method",
            "name": "_onTagClick",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1431,
            "description": "Event handler for when autosuggest list is moused over",
            "itemtype": "method",
            "name": "_onListMouseover",
            "params": [
                {
                    "name": "evt",
                    "description": "The mouseover event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1451,
            "description": "Event handler for when autosuggest list is clicked",
            "itemtype": "method",
            "name": "_onListClick",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1478,
            "description": "Event handler for when this.$box is clicked",
            "itemtype": "method",
            "name": "_onBoxClick",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1489,
            "description": "Handle keypresses while in tag input field",
            "itemtype": "method",
            "name": "_onKeydown",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event (a raw browser event, not jQuery.Event)",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1495,
            "description": "Access the keydown event before Suggester processes it",
            "itemtype": "event",
            "name": "BeforeHandleKey",
            "params": [
                {
                    "name": "keydown",
                    "description": "The keydown event (a raw browser event, not jQuery.Event)",
                    "type": "Event"
                }
            ],
            "ifprevented": "Key is not handled by Suggester. You may want to call event.keydown.preventDefault();",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1540,
            "description": "Access the keydown event after Suggester processes it",
            "itemtype": "event",
            "name": "AfterHandleKey",
            "params": [
                {
                    "name": "keydown",
                    "description": "The keydown event (a raw browser event, not jQuery.Event)",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1549,
            "description": "Handle paste on this.$input",
            "itemtype": "method",
            "name": "_onValueChange",
            "params": [
                {
                    "name": "evt",
                    "description": "The paste event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1558,
            "description": "Handle UP key on this.$input",
            "itemtype": "method",
            "name": "_key_UP",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1570,
            "description": "Handle DOWN key on this.$input",
            "itemtype": "method",
            "name": "_key_DOWN",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1584,
            "description": "Handle BACKSPACE key on this.$input",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1610,
            "description": "Handle TAB and COMMA and SEMICOLON key on this.$input",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1634,
            "description": "Handle ESC key on this.$input",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1641,
            "description": "Handle ENTER key on this.$input",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1661,
            "description": "Handle other keys (e.g. printable characters) on this.$input",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1677,
            "description": "Handler for form submission",
            "params": [
                {
                    "name": "jqEvent",
                    "description": "The submit event",
                    "type": "JQuery"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1683,
            "description": "Respond before form is submitted and before Suggester adds on submit",
            "itemtype": "event",
            "name": "BeforeSubmit",
            "params": [
                {
                    "name": "The",
                    "description": "jQuery-wrapped browser event",
                    "type": "jQuery.Event"
                },
                {
                    "name": "form",
                    "description": "The input's form (same as this.$form)",
                    "type": "HTMLFormElement"
                }
            ],
            "ifprevented": "Form will not be submitted",
            "example": [
                "      \n\n\tinstance.bind('BeforeSubmit', function(event) {\n\t\tif (this.$input.val() !== '' && !confirm('Are you sure you want to submit this form unfinished?')) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1718,
            "description": "The handler function that is passed to $.ajax({beforeSend:...}) to alter XHR if needed",
            "itemtype": "method",
            "name": "_beforeFetch",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "The jQuery XHR object (see http://api.jquery.com/jQuery.ajax/#jqXHR)",
                    "type": "JqXHR"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1724,
            "description": "A chance to access the jqXHR before the ajax request has been sent",
            "itemtype": "event",
            "name": "BeforeFetch",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "the jQuery XHR object (see http://api.jquery.com/jQuery.ajax/#jqXHR)",
                    "type": "JqXHR"
                },
                {
                    "name": "term",
                    "description": "the term that is being searched for",
                    "type": "String"
                }
            ],
            "ifprevented": "XHR is aborted",
            "example": [
                "\n\n\tinstance.bind('BeforeFetch', function(event) {\n\t\tevent.jqXHR.setRequestHeader('something','something');\n\t\tevent.jqXHR.fail(function() {\n\t\t\talert('ajax call failed');\n\t\t}).always(function() {\n\t\t\talert('ajax call finished regardless of success or failure');\n\t\t});\n\t});\n\t\t\t"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1752,
            "description": "Handler passed to $.ajax().done(function(){...}) that handles suggestion data that is returned",
            "itemtype": "method",
            "name": "_afterFetch",
            "params": [
                {
                    "name": "records",
                    "description": "The Array of record objects returned from the XHR",
                    "type": "Array"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1758,
            "itemtype": "event",
            "name": "AfterFetch",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "The jQuery XHR object (see http://api.jquery.com/jQuery.ajax/#jqXHR)"
                },
                {
                    "name": "records",
                    "description": "The Array of record objects returned from the XHR"
                },
                {
                    "name": "term",
                    "description": "The term that was search for"
                }
            ],
            "ifprevented": "Nothing is done with results (i.e. suggestion box is not built and displayed)",
            "example": [
                "\n\n\tinstance.bind('AfterFetch', function(event) {\n\t\tevent.data.push({value:'', label:'Adding a test suggestion at the end'});\n\t});\n\t\t\t"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1783,
            "description": "Callback used to close the suggestion box when the user clicks off of it",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1794,
            "description": "Format a suggestion before display",
            "itemtype": "method",
            "name": "_formatSuggestion",
            "params": [
                {
                    "name": "record",
                    "description": "The record that was suggested",
                    "type": "Object"
                },
                {
                    "name": "substr",
                    "description": "The string that generated the list of suggestions",
                    "type": "String"
                }
            ],
            "return": {
                "description": "HTML to use as the item (e.g. '<li class=\"sugg-item\">Suggestion</li>')",
                "type": "String"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1803,
            "description": "Call to dynamically inject your own formatting on each suggestion",
            "itemtype": "event",
            "name": "BeforeFormat - use to do your own formatting",
            "params": [
                {
                    "name": "record",
                    "description": "The record object that is being suggested",
                    "type": "Object"
                },
                {
                    "name": "substr",
                    "description": "The part of the string that matches the suggestion search fields",
                    "type": "String"
                },
                {
                    "name": "html",
                    "description": "If you set event.html, it will be used instead of constructing the HTML",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n\tinstance.bind('BeforeFormat', function(event) {\n\t\tevent.html = '<li>' + event.record.label.toUpperCase() + '</li>';\n\t});              \n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1840,
            "description": "Alter the HTML that has been constructed before it is put into the DOM",
            "itemtype": "event",
            "name": "AfterFormat",
            "params": [
                {
                    "name": "record",
                    "description": "The record object that is being suggested",
                    "type": "Object"
                },
                {
                    "name": "substr",
                    "description": "The part of the string that matches the suggestion search fields",
                    "type": "String"
                },
                {
                    "name": "html",
                    "description": "Change the HTML before it is put into the dom",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n\tinstance.bind('AfterFormat', function(event) {\n\t\tevent.html; // <li><strong class=\"sugg-match\">Canis</strong> Major</li>\n\t\tevent.html = event.html.replace(/<\\/?strong\\b/, 'em');\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1861,
            "description": "Update the size when this.options.inputSize is \"auto\"",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1869,
            "description": "Set the value of the original input to a comma-delimited set of labels",
            "itemtype": "method",
            "name": "save",
            "return": {
                "description": "The new value",
                "type": "String"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1880,
            "description": "Inject functionality before saving",
            "itemtype": "event",
            "name": "BeforeSave",
            "params": [
                {
                    "name": "newValue",
                    "description": "The value that will be written to the original input (writeable)",
                    "type": "String"
                }
            ],
            "ifcancelled": "The original input will not be populated with the new value",
            "example": [
                "\n\n\tinstance.bind('BeforeSave', function(event) {\n\t\tevent.newValue += '!';\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1900,
            "description": "Do something after saving value to original input",
            "itemtype": "event",
            "name": "AfterSave",
            "params": [
                {
                    "name": "newValue",
                    "description": "The value that was written to the original input",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n\tinstance.bind('AfterSave', function(event) {\n\t\tsaveToServer(event.newValue);\n\t});\n     "
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1916,
            "description": "Given tag text, remove a tag from the internal collection and from the DOM",
            "itemtype": "method",
            "name": "_spliceTag",
            "params": [
                {
                    "name": "value",
                    "description": "The text of the tag",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The record associated with that tag",
                "type": "Object"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1929,
            "description": "Given an array index, remove a tag from the internal collection and from the DOM",
            "itemtype": "method",
            "name": "_spliceTagByIdx",
            "params": [
                {
                    "name": "idx",
                    "description": "The index position in the internal collection",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Suggester.Tag object that was removed",
                "type": "Suggester.Tag"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1951,
            "description": "Find a tag given value",
            "itemtype": "method",
            "name": "getTagIndex",
            "params": [
                {
                    "name": "value",
                    "description": "The text of the tag",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The index position of the tag in the internal collection or -1 if not found",
                "type": "Number"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1967,
            "description": "Setup publish/subscribe system that uses jQuery's event system. Allows subscribing this way: instance.bind('AfterFilter', myhandler)",
            "itemtype": "method",
            "name": "_setupPubsub",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1987,
            "description": "Given an input element, get the cursor position. Used to determine if backspace key should delete the previous tag",
            "itemtype": "method",
            "name": "_isCursorAtStart",
            "return": {
                "description": "true if the cursor is at the start and no text is selected",
                "type": "Boolean"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2025,
            "description": "Pass to contructor to subclass (e.g. `MySuggester.prototype = new $.Suggester($.Suggester.doSubclass)`)",
            "var": "{Object}",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2030,
            "description": "A collection of all the instances",
            "itemtype": "property",
            "name": "instances",
            "type": "Array",
            "static": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2036,
            "description": "Add data to all instances",
            "itemtype": "method",
            "name": "addData",
            "static": 1,
            "params": [
                {
                    "name": "data",
                    "description": "Add more data to all the registered instances",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2049,
            "description": "Lightweight event handler to allow keydown to have less overhead (i.e. bypass jQuery's event system)",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2066,
            "description": "Create a subclass of Suggester",
            "itemtype": "method",
            "name": "subclass",
            "static": 1,
            "params": [
                {
                    "name": "jQueryMethodName",
                    "description": "The method name to add to jQuery.fn",
                    "type": "String"
                },
                {
                    "name": "properties",
                    "description": "Additional properties and methods to add to subclass",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The new class object",
                "type": "Function"
            },
            "example": [
                "\n\n\tvar MySuggester = $.Suggester.subclass('mysuggester', {\n\t\tinitialize: function($textInput, options) {\n\t\t\toptions = options || {};\n\t\t\tthis.options.myOption = options.myOptions || 'default';\n\t\t\tthis.callParent('initialize', $textInput, options);\n\t\t}\n\t});\n\t// now call $(selector).mysuggester(options);\n\t\t"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2139,
            "description": "The Suggester to which this tag belongs",
            "itemtype": "property",
            "name": "suggester",
            "type": "Suggester",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2143,
            "description": "The value of the tag",
            "itemtype": "property",
            "name": "value",
            "type": "String",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2147,
            "description": "The display text if the tag",
            "itemtype": "property",
            "name": "label",
            "type": "String",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2151,
            "description": "The index relative to other tags",
            "itemtype": "property",
            "name": "index",
            "type": "Number",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2155,
            "description": "The hidden input element",
            "itemtype": "property",
            "name": "$hidden",
            "type": "JQuery",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2159,
            "description": "The tag elements",
            "itemtype": "property",
            "name": "$tag",
            "type": "JQuery",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2163,
            "description": "The record corresponding to this tag, if any",
            "itemtype": "property",
            "name": "",
            "type": "Object|undefined",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2168,
            "description": "Get the Suggester widget to which this tag belongs",
            "itemtype": "method",
            "name": "getWidget",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2176,
            "description": "Remove this tag from the tag collection",
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": "",
                "type": "Suggester.Tag"
            },
            "chainable": 1,
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2186,
            "description": "Get thee index of this tag relative to others",
            "itemtype": "method",
            "name": "getIndex",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2194,
            "description": "Get the hidden value of this tag",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2202,
            "description": "Set the hidden value of this tag",
            "params": [
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester.Tag"
            },
            "chainable": 1,
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2214,
            "description": "Get the visible label of this tag",
            "itemtype": "method",
            "name": "getLabel",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2222,
            "description": "Set the visibile label of this tag",
            "itemtype": "method",
            "name": "setLabel",
            "return": {
                "description": "",
                "type": "Suggester.Tag"
            },
            "chainable": 1,
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2233,
            "description": "Get the hidden value of the tag",
            "itemtype": "method",
            "name": "getHidden",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2241,
            "description": "Get the tag element",
            "itemtype": "method",
            "name": "getElement",
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2249,
            "description": "Get the record that generated this tag, if any",
            "return": {
                "description": "",
                "type": "Object|undefined"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:84"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:352"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:465"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:564"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:584"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:622"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:691"
        },
        {
            "message": "unknown tag: ifcancelled",
            "line": " src/Suggester.js:839"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:917"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:982"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:1016"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:1216"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:1495"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:1683"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:1724"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:1758"
        },
        {
            "message": "unknown tag: ifcancelled",
            "line": " src/Suggester.js:1880"
        },
        {
            "message": "unknown tag: var",
            "line": " src/Suggester.js:2025"
        },
        {
            "message": "Missing item type\nHandle BACKSPACE key on this.$input",
            "line": " src/Suggester.js:1584"
        },
        {
            "message": "Missing item type\nHandle TAB and COMMA and SEMICOLON key on this.$input",
            "line": " src/Suggester.js:1610"
        },
        {
            "message": "Missing item type\nHandle ESC key on this.$input",
            "line": " src/Suggester.js:1634"
        },
        {
            "message": "Missing item type\nHandle ENTER key on this.$input",
            "line": " src/Suggester.js:1641"
        },
        {
            "message": "Missing item type\nHandle other keys (e.g. printable characters) on this.$input",
            "line": " src/Suggester.js:1661"
        },
        {
            "message": "Missing item type\nHandler for form submission",
            "line": " src/Suggester.js:1677"
        },
        {
            "message": "Missing item type\nCallback used to close the suggestion box when the user clicks off of it",
            "line": " src/Suggester.js:1783"
        },
        {
            "message": "Missing item type\nUpdate the size when this.options.inputSize is \"auto\"",
            "line": " src/Suggester.js:1861"
        },
        {
            "message": "Missing item type\nPass to contructor to subclass (e.g. `MySuggester.prototype = new $.Suggester($.Suggester.doSubclass)`)",
            "line": " src/Suggester.js:2025"
        },
        {
            "message": "Missing item type\nLightweight event handler to allow keydown to have less overhead (i.e. bypass jQuery's event system)",
            "line": " src/Suggester.js:2049"
        },
        {
            "message": "Missing item type\nSet the hidden value of this tag",
            "line": " src/Suggester.js:2202"
        },
        {
            "message": "Missing item type\nGet the record that generated this tag, if any",
            "line": " src/Suggester.js:2249"
        }
    ]
}