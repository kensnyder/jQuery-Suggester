{
    "project": {
        "name": "Suggester",
        "description": "Turn a text input into a Facebook-style multiple-tag input. Lots of options and event hooks.",
        "version": "1.3.1",
        "url": "https://github.com/kensnyder/jQuery-Suggester"
    },
    "files": {
        "src/Suggester.js": {
            "name": "src/Suggester.js",
            "modules": {
                "jQuery": 1
            },
            "classes": {
                "Suggester": 1,
                "Suggester.Tag": 1
            },
            "fors": {},
            "namespaces": {
                "Suggester": 1
            }
        }
    },
    "modules": {
        "jQuery": {
            "name": "jQuery",
            "submodules": {},
            "classes": {
                "Suggester": 1,
                "Suggester.Tag": 1
            },
            "fors": {},
            "namespaces": {
                "Suggester": 1
            },
            "tag": "module",
            "file": "src/Suggester.js",
            "line": 2673
        }
    },
    "classes": {
        "Suggester": {
            "name": "Suggester",
            "shortname": "Suggester",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jQuery",
            "namespace": "",
            "file": "src/Suggester.js",
            "line": 319,
            "is_constructor": 1,
            "example": [
                "\n\n\t// Instantiate the OOP way\n\tvar instance = new $.Suggester('selector', options)\n\t\t\n\t// Instantiate the jQuery way\n\t$('selector').suggester(options);\n\t// call methods on the instance\n\t$('selector').suggester('method', arg1, arg2);\n\t// initialize and get back instance\n\tvar instance = $('selector').suggester('getInstance');"
            ],
            "params": [
                {
                    "name": "$textInput",
                    "description": "The input element to convert into a widget",
                    "type": "String|jQuery|HTMLElement"
                },
                {
                    "name": "options",
                    "description": "See {{#crossLink \"Suggester/options:property\"}}options property{{/crossLink}} for full documentation",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "Suggester.defaultOptions"
                }
            ]
        },
        "Suggester.Tag": {
            "name": "Suggester.Tag",
            "shortname": "Suggester.Tag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jQuery",
            "namespace": "Suggester",
            "file": "src/Suggester.js",
            "line": 2673,
            "is_constructor": 1,
            "params": [
                {
                    "name": "properties",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "suggester",
                            "description": "The Suggester to which this tag belongs",
                            "type": "Suggester"
                        },
                        {
                            "name": "value",
                            "description": "The value of the tag",
                            "type": "String"
                        },
                        {
                            "name": "label",
                            "description": "The display text of the tag",
                            "type": "String"
                        },
                        {
                            "name": "index",
                            "description": "The index relative to other tags",
                            "type": "Number"
                        },
                        {
                            "name": "$hidden",
                            "description": "The hidden input element",
                            "type": "JQuery"
                        },
                        {
                            "name": "$tag",
                            "description": "The tag element",
                            "type": "JQuery"
                        },
                        {
                            "name": "record",
                            "description": "The record corresponding to this tag, if any",
                            "type": "Object|undefined"
                        }
                    ]
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "src/Suggester.js",
            "line": 85,
            "description": "Default options. Change these to globally change the default options\nSee {{#crossLink \"Suggester/constructor:method\"}}constructor{{/crossLink}} for documentation on each option",
            "itemtype": "property",
            "name": "defaultOptions",
            "type": "Object",
            "static": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 144,
            "description": "The current options. Starts with value given in constructor",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "example": [
                "\n\t\n\t// EXAMPLE TEMPLATE CONFIG\t\t\n\t// change uls to divs and lis to spans\n\toptions.template = $.Suggester.defaultOptions.template\n\t\t.replace(/<(\\/)?ul/g, '<$1div')\n\t\t.replace(/<(\\/)?li/g, '<$1span')\n\t;\n\t// custom list item template\n\toptions.listItemTemplate = '<li class=\"sugg-item\">{record.lname}, {record.fname} ({record.email})</li>';\t\n\t"
            ],
            "class": "Suggester",
            "module": "jQuery",
            "subprops": [
                {
                    "name": "data",
                    "description": "Initial data to use for suggestions",
                    "type": "Array|Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "valueProperty",
                    "description": "The name of object property that should be used as the tag's value. Only applicable when options.data is set",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"value\""
                },
                {
                    "name": "labelProperty",
                    "description": "The name of object property that should be used as the tag's display text. Only applicable when options.data is set",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"value\""
                },
                {
                    "name": "searchProperties",
                    "description": "The array of object property names that should be searched when generating suggestions. Only applicable when options.data is set",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "Array(\"value\")"
                },
                {
                    "name": "matchAt",
                    "description": "Where to match when finding suggestions. It can be \"anywhere\", \"start\", \"end\" or an integer. Only applicable when options.data is set",
                    "type": "String|Number",
                    "optional": true,
                    "optdefault": "\"anywhere\""
                },
                {
                    "name": "caseSensitive",
                    "description": "If true, find matches regardless of case. Only applicable when options.data is set. Only applicable when options.data is set",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "dataUrl",
                    "description": "Url to call to get json or jsonp results. Use %s to indicate where search text should be inserted. e.g. \"http://example.com/myjson?query=%s\" or \"http://example.com/myjsonp?query=%s&callback=%s\"",
                    "type": "String",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "dataType",
                    "description": "Can be \"json\" or \"jsonp\". If json, options.dataUrl needs to be in the format \"http://example.com/myjsonp?query=%s&mycallback=%s\". To handle xml, you'll need to register BeforeFetch and AfterFetch handlers or overwrite the fetchResults method",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"json\""
                },
                {
                    "name": "fly",
                    "description": "Which way should the suggestion box fly. If \"up\", the suggestion box will appear before the input box in the DOM tree. A css class of \"sugg-fly-up\" or \"sugg-fly-down\" is applied to the widget element based on this value",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"down\""
                },
                {
                    "name": "suggListPosition",
                    "description": "If \"absolute\", the suggestion box will be appended to <body> and positioned and sized each time it is opened. This is useful for widgets within table elements",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"relative\""
                },
                {
                    "name": "multiselect",
                    "description": "If true, allow multiple tags",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "preventDuplicates",
                    "description": "If true, the first tag will be removed when a duplicate is typed in",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "omitAlreadyChosenItems",
                    "description": "If true, don't suggest items that have already been chosen as tags. Only applicable when options.data is set",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "minChars",
                    "description": "The minimum number of characters a user must type before the suggestion box will appear. If 0, show choices when input is simply focused (like a faux select widget)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "3"
                },
                {
                    "name": "keyDelay",
                    "description": "The number of milliseconds between keystrokes before the suggestion lookup begins",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "400"
                },
                {
                    "name": "addOnComma",
                    "description": "If true, typing a comma will add the current text as a tag",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "addOnTab",
                    "description": "If true, typing a tab will add the current text as a tag",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "addOnSemicolon",
                    "description": "If true, typing a semicolon will add the current text as a tag",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "addOnSubmit",
                    "description": "If true, add tag on submit if user has entered text but not typed comma or tab",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "addOnBlur",
                    "description": "If true, add tag on blur if user has entered text but not typed comma or tab",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "submitOnEnter",
                    "description": "If false, prevent the form from submitting when the user presses enter on the empty input",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "inputSize",
                    "description": "Manually set the input size property to a certain width. If auto, set size to text width",
                    "type": "String",
                    "optional": true,
                    "optdefault": "auto"
                },
                {
                    "name": "placeholder",
                    "description": "Placeholder text to display when no tags are present. e.g. \"Enter tags...\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "emptyText",
                    "description": "Message to show when there are no suggestions - default is \"(Type a comma to create a new item)\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "prompt",
                    "description": "Message to display in suggestion list when below min char length",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "maxSuggestions",
                    "description": "Only display this many suggestions",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "10"
                },
                {
                    "name": "saveToInput",
                    "description": "If true, save back to original input each time a tag is added or removed",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "addHiddenInputs",
                    "description": "If true, also add a hidden input for each tag (fieldname_tag[]) for easier server-side processing (See options.hiddenName to create a custom name)",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "hiddenName",
                    "description": "The name to use for hidden elements (defaults to the original input's name plus \"_tags[]\")",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "highlightSubstring",
                    "description": "If true, wrap first matching substring in each suggestion with <strong class=\"sugg-match\"></strong>",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "template",
                    "description": "The html used to generate the widget. You can add more markup, change tag names, or add css classes, but all the sugg-* classes need to remain. See below for default.\n\t\n\t<div class=\"sugg-widget\"> <!-- this.$widget -->\t\t\n\t\t<ul class=\"sugg-box\"> <!-- this.$box -->\n\t\t\t<li class=\"sugg-box-item sugg-tag\">  <!-- this.$tagTemplate -->\n\t\t\t\t<span class=\"sugg-label\">TAG TEXT GOES HERE</span><span class=\"sugg-remove\" title=\"Click to remove\">&times;</span>\n\t\t\t</li>\n\t\t\t<li class=\"sugg-box-item sugg-input-wrapper\"> <!-- this.$inputWrapper -->\n\t\t\t\t<input type=\"text\" class=\"sugg-input\" value=\"\" autocomplete=\"off\" /> <!-- this.$input -->\n\t\t\t</li>\n\t\t</ul>\n\t\t<div class=\"sugg-list-wrapper\">\n\t\t\t<ul class=\"sugg-list\" style=\"display:none\"> <!-- this.$suggList -->\n\t\t\t\t<li class=\"sugg-item {record.cssClass}\">{record.value}</li> <!-- innerHTML is used as this.listItemTemplate unless options.listItemTemplate is set -->\n\t\t\t\t<li class=\"sugg-empty\"></li> <!-- this.$empty -->\n\t\t\t\t<li class=\"sugg-prompt\"></li> <!-- this.$prompt -->\n\t\t\t</ul>\n\t\t</div>\n\t</div>",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "listItemTemplate",
                    "description": "Override the .sugg-item element in options.template",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "theme",
                    "description": "The css class to add to widget (e.g. \"sugg-theme-coolblue\"). The following themes come predefined in the CSS: \"coolblue\", \"faceblue\", \"graybox\", \"grayred\"",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"coolblue\""
                },
                {
                    "name": "onInitialize",
                    "description": "Add a {{#crossLink \"Suggester/Initialize:event\"}}Initialize event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onChange",
                    "description": "Add a {{#crossLink \"Suggester/Change:event\"}}Change event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeAdd",
                    "description": "Add a {{#crossLink \"Suggester/BeforeAdd:event\"}}BeforeAdd event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeAjax",
                    "description": "Add a {{#crossLink \"Suggester/BeforeAjax:event\"}}BeforeAjax event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeClose",
                    "description": "Add a {{#crossLink \"Suggester/BeforeClose:event\"}}BeforeClose event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeFetch",
                    "description": "Add a {{#crossLink \"Suggester/BeforeFetch:event\"}}BeforeFetch event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeFilter",
                    "description": "Add a {{#crossLink \"Suggester/BeforeFilter:event\"}}BeforeFilter event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeFormat",
                    "description": "Add a {{#crossLink \"Suggester/BeforeFormat:event\"}}BeforeFormat event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeHandleKey",
                    "description": "Add a {{#crossLink \"Suggester/BeforeHandleKey:event\"}}BeforeHandleKey event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeMove",
                    "description": "Add a {{#crossLink \"Suggester/BeforeMove:event\"}}BeforeMove event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeOpen",
                    "description": "Add a {{#crossLink \"Suggester/BeforeOpen:event\"}}BeforeOpen event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeRemove",
                    "description": "Add a {{#crossLink \"Suggester/BeforeRemove:event\"}}BeforeRemove event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeRender",
                    "description": "Add a {{#crossLink \"Suggester/BeforeRender:event\"}}BeforeRender event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeSave",
                    "description": "Add a {{#crossLink \"Suggester/BeforeSave:event\"}}BeforeSave event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeSubmit",
                    "description": "Add a {{#crossLink \"Suggester/BeforeSubmit:event\"}}BeforeSubmit event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeSuggest",
                    "description": "Add a {{#crossLink \"Suggester/BeforeSuggest:event\"}}BeforeSuggest event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterAdd",
                    "description": "Add a {{#crossLink \"Suggester/AfterAdd:event\"}}AfterAdd event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterAjax",
                    "description": "Add a {{#crossLink \"Suggester/AfterAjax:event\"}}AfterAjax event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterClose",
                    "description": "Add a {{#crossLink \"Suggester/AfterClose:event\"}}AfterClose event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterFetch",
                    "description": "Add a {{#crossLink \"Suggester/AfterFetch:event\"}}AfterFetch event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterFilter",
                    "description": "Add a {{#crossLink \"Suggester/AfterFilter:event\"}}AfterFilter event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterFormat",
                    "description": "Add a {{#crossLink \"Suggester/AfterFormat:event\"}}AfterFormat event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterHandleKey",
                    "description": "Add a {{#crossLink \"Suggester/AfterHandleKey:event\"}}AfterHandleKey event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterMove",
                    "description": "Add a {{#crossLink \"Suggester/AfterMove:event\"}}AfterMove event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterOpen",
                    "description": "Add a {{#crossLink \"Suggester/AfterOpen:event\"}}AfterOpen event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterRemove",
                    "description": "Add a {{#crossLink \"Suggester/AfterRemove:event\"}}AfterRemove event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterSave",
                    "description": "Add a {{#crossLink \"Suggester/AfterSave:event\"}}AfterSave event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterSuggest",
                    "description": "Add a {{#crossLink \"Suggester/AfterSuggest:event\"}}AfterSuggest event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                }
            ]
        },
        {
            "file": "src/Suggester.js",
            "line": 239,
            "description": "The input used to make the widget",
            "itemtype": "property",
            "name": "$originalInput",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 243,
            "description": "Array of static data used instead of an ajax call",
            "itemtype": "property",
            "name": "data",
            "type": "Object[]",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 247,
            "description": "An array of Suggester.Tag objects",
            "itemtype": "property",
            "name": "tags",
            "type": "Suggester.Tag[]",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 251,
            "description": "The name to use for hidden elements (defaults to the original input's name plus \"_tags[]\")",
            "itemtype": "property",
            "name": "hiddenName",
            "type": "String",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 255,
            "description": "The tag that is selected for deletion",
            "itemtype": "property",
            "name": "$focusedTag",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 259,
            "description": "The item currently selected in the suggestion box",
            "itemtype": "property",
            "name": "$currentItem",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 263,
            "description": "The publish and subscribe handle - equal to $(this)",
            "itemtype": "property",
            "name": "pubsub",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 267,
            "description": "The element that wraps the widget",
            "itemtype": "property",
            "name": "$widget",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 271,
            "description": "The container that holds the chosen tags",
            "itemtype": "property",
            "name": "$box",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 275,
            "description": "The tag element that is cloned to make new tags",
            "itemtype": "property",
            "name": "$tagTemplate",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 279,
            "description": "The input that users type in",
            "itemtype": "property",
            "name": "$input",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 283,
            "description": "The container for the input",
            "itemtype": "property",
            "name": "$inputWrapper",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 287,
            "description": "The suggestion list element",
            "itemtype": "property",
            "name": "$suggList",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 291,
            "description": "The element that is positioned relatively to hold the absolutely positioned suggestion list",
            "itemtype": "property",
            "name": "$suggListWrapper",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 295,
            "description": "The element enclosing the empty text",
            "itemtype": "property",
            "name": "$empty",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 299,
            "description": "The element enclosing the prompt",
            "itemtype": "property",
            "name": "$prompt",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 303,
            "description": "The html to use for suggestion list items",
            "itemtype": "property",
            "name": "listItemTemplate",
            "type": "String",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 307,
            "description": "The search term we are currently searching for",
            "itemtype": "property",
            "name": "_searchTerm",
            "type": "String",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 311,
            "description": "The text in the input box that will be used to fetch results (i.e. what the user just typed)",
            "itemtype": "property",
            "name": "_text",
            "type": "String",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 315,
            "description": "The jQuery XHR object used initilized for fetching data - http://api.jquery.com/jQuery.ajax/#jqXHR",
            "itemtype": "property",
            "name": "_jqXHR",
            "type": "JqXHR",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 372,
            "description": "Do something after the widget is completely rendered and initialized. Note that it fires during instantiation, so an onInitialize property must be set in the constructor.",
            "itemtype": "event",
            "name": "Initialize",
            "example": [
                "\n\t\t\t \n\tnew $.Suggester($input, {\n\t\tonInitialize: function(event) {\n\t\t\theyItsReady();\n\t\t}\n\t});\n\t\t\t "
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 387,
            "description": "Completely remove Suggester widget and unhide the original input box (with values populated)",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "keepHiddenInputs",
                            "description": "If true, append all hidden inputs after the original input",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The original input",
                "type": "JQuery"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 415,
            "description": "Add a tag by a record or value",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "value",
                    "description": "the tag to add",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "the text to display in the new tag",
                    "type": "String",
                    "optional": true,
                    "optdefault": "value"
                },
                {
                    "name": "$item",
                    "description": "Set internally when the record is added by choosing from the suggestion box",
                    "type": "JQuery",
                    "optional": true
                }
            ],
            "return": {
                "description": "The jQuery object containing the newly created label or undefined if one was not created",
                "type": "JQuery"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 456,
            "description": "Fired before a tag is added",
            "itemtype": "event",
            "name": "BeforeAdd",
            "params": [
                {
                    "name": "value",
                    "description": "The tag to be added (writeable)",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "The value of the tag to be added (writeable)",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "The suggestion that was chosen, if any (writeable)",
                    "type": "JQuery"
                },
                {
                    "name": "record",
                    "description": "The record that was chosen, if any (writeable)",
                    "type": "Object"
                }
            ],
            "ifprevented": "The tag is not added",
            "example": [
                "       \n\t\t\t \n\tinstance.bind('BeforeAdd', function(event) {\n\t\tif (isSwearWord(evt.value)) {\n\t\t\tevent.preventDefault();\n\t\t\talert('Tags cannot be swear words');\n\t\t}\n\t});"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 496,
            "description": "Allows you to take action after a tag is added",
            "itemtype": "event",
            "name": "AfterAdd",
            "params": [
                {
                    "name": "tag",
                    "description": "The tag object that was added. Has methods such as getElement(), getHidden(), getValue(), getLabel(), etc.",
                    "type": "Suggester.Tag"
                },
                {
                    "name": "item",
                    "description": "The suggestion that was chosen, if any",
                    "type": "JQuery"
                },
                {
                    "name": "record",
                    "description": "The record that was chosen, if any",
                    "type": "String"
                }
            ],
            "example": [
                "\n\t\t\t \n\tinstance.bind('AfterAdd', function(event) {\n\t\t// fade in tag\n\t\tevent.tag.getElement().fadeIn(500);\n\t});"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 514,
            "description": "Fired after a tag is added or removed or after value is manually set",
            "itemtype": "event",
            "name": "Change",
            "example": [
                "\n\n\tinstance.bind('Change', function(event) {\n\t\tnoteSomeChange();\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 527,
            "description": "Add a tag directly without triggering BeforeAdd or AfterAdd",
            "itemtype": "method",
            "name": "pushTag",
            "params": [
                {
                    "name": "value",
                    "description": "The value of the tag",
                    "type": "String|Number"
                },
                {
                    "name": "label",
                    "description": "The text to display on the tag",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The new tag object",
                "type": "Suggester.Tag"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 561,
            "description": "Add a tag with the contents of the input; e.g. when the user has typed something but clicks on another part of the form\nNote: this happens on blur when this.options.addOnBlur is true",
            "itemtype": "method",
            "name": "addCurrentBuffer",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 576,
            "description": "Move the selection up or down in the suggestion box",
            "itemtype": "method",
            "name": "moveSelection",
            "params": [
                {
                    "name": "direction",
                    "description": "Either \"up\" or \"down\"",
                    "type": "String",
                    "optional": true,
                    "optdefault": "up"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 595,
            "description": "Fire in response to up or down arrow while suggestion list is focused",
            "itemtype": "event",
            "name": "BeforeMove",
            "params": [
                {
                    "name": "direction",
                    "description": "\"up\" or \"down\"",
                    "type": "String"
                },
                {
                    "name": "current",
                    "description": "jQuery object with the currently selected item or null if there isn't one (writeable)",
                    "type": "JQuery|null"
                },
                {
                    "name": "next",
                    "description": "jQuery object with the item that will be selected next (writeable)",
                    "type": "JQuery|null"
                }
            ],
            "ifprevented": "Movement is cancelled",
            "example": [
                "\n\n\tinstance.bind('BeforeMove', function(event) {\n\t\talert('The new selection will be ' + event.next.text());\n\t});\n\t\t\t"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 629,
            "description": "Fired after selected suggestion is changed in response to up or down arrow",
            "itemtype": "event",
            "name": "AfterMove",
            "params": [
                {
                    "name": "direction",
                    "description": "\"up\" or \"down\"",
                    "type": "String"
                },
                {
                    "name": "last",
                    "description": "The previously selected item",
                    "type": "JQuery|null"
                },
                {
                    "name": "current",
                    "description": "The newly selected item",
                    "type": "JQuery"
                }
            ],
            "example": [
                "\n\t\n\tinstance.bind('AfterMove', function(event) {\n\t\talert('The new selection is ' + event.current.text());\n\t});\n\t\t\t"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 649,
            "description": "Select a suggestion",
            "itemtype": "method",
            "name": "selectItem",
            "params": [
                {
                    "name": "$tag",
                    "description": "",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 660,
            "description": "Deselect a suggestion",
            "itemtype": "method",
            "name": "deselectItem",
            "params": [
                {
                    "name": "$tag",
                    "description": "",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 671,
            "description": "Deselect all suggestions",
            "itemtype": "method",
            "name": "deselectAllItems",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 682,
            "description": "Open suggestion list for the given text",
            "itemtype": "method",
            "name": "suggest",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 698,
            "description": "Add more data records to the autosuggest list. Does not apply when dataUrl is set",
            "itemtype": "method",
            "name": "addData",
            "params": [
                {
                    "name": "data",
                    "description": "More records in the same object format as initially set",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 719,
            "description": "Set data records to the autosuggest list. Does not apply when dataUrl is set",
            "itemtype": "method",
            "name": "setData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 731,
            "description": "Get all the records in the autosuggest list. Does not apply when dataUrl is set",
            "itemtype": "method",
            "name": "getData",
            "return": {
                "description": "",
                "type": "Object[]"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 739,
            "description": "Set the direction of the suggestion menu, to fly upwards or downwards",
            "itemtype": "method",
            "name": "setFlyDirection",
            "params": [
                {
                    "name": "direction",
                    "description": "either \"up\" or \"down\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 759,
            "description": "Focus on a previously added tag",
            "itemtype": "method",
            "name": "focusTag",
            "params": [
                {
                    "name": "$tag",
                    "description": "The .sugg-tag element to focus",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 773,
            "description": "Unfocus the previously focussed tag",
            "itemtype": "method",
            "name": "unfocusTag",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 787,
            "description": "Remove the focused tag",
            "itemtype": "method",
            "name": "removeFocusedTag",
            "params": [
                {
                    "name": "evt",
                    "description": "(optional)  Used to check if $document keypress is backspace or delete",
                    "type": "jQuery.Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 805,
            "description": "Remove a tag given its text or jQuery element or HTML element",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "$tag",
                    "description": "the tag to remove",
                    "type": "String|jQuery|HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 837,
            "description": "Fired before a tag is removed",
            "itemtype": "event",
            "name": "BeforeRemove",
            "params": [
                {
                    "name": "tag",
                    "description": "The tag to be removed",
                    "type": "JQuery"
                },
                {
                    "name": "value",
                    "description": "The value of the tag to be removed (writeable)",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "The label of the tag to be removed",
                    "type": "String"
                }
            ],
            "ifprevented": "The tag will not be removed",
            "example": [
                "\n\t\t\t \n\tinstance.bind('BeforeRemove', function(event) {\n\t\tif (!confirm('Are you sure you want to remove the tag \"' + event.label + '\"?')) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t});\n\t\t\t "
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 867,
            "description": "Fired after a tag is removed",
            "itemtype": "event",
            "name": "AfterRemove",
            "params": [
                {
                    "name": "tag",
                    "description": "The tag element that was removed",
                    "type": "JQuery"
                },
                {
                    "name": "value",
                    "description": "The value of the tag that was removed",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "The label of the tag that was removed",
                    "type": "String"
                },
                {
                    "name": "The",
                    "description": "tag object that was removed",
                    "type": "Suggester.Tag"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 884,
            "description": "Find a suggestion record by text. Only applies when this.options.data is set.",
            "itemtype": "method",
            "name": "findRecord",
            "params": [
                {
                    "name": "text",
                    "description": "The text to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The matched record object or false if nothing matched.",
                "type": "Object|false"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 893,
            "description": "Search through this.data to find a record with a value or label equal to the given value",
            "itemtype": "method",
            "name": "searchData",
            "params": [
                {
                    "name": "value",
                    "description": "The value or label to find",
                    "type": "String"
                },
                {
                    "name": "props",
                    "description": "An array of strings of property names to search",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the record if found, false if not found",
                "type": "Object|Boolean"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 953,
            "description": "Initiate suggestion process if the input text is >= this.options.minChars, otherwise show prompt",
            "itemtype": "method",
            "name": "suggestIfNeeded",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 972,
            "description": "Show the prompt text to give a hint to users. Only called when there are no items and this.options.prompt is truthy",
            "itemtype": "method",
            "name": "showPrompt",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 987,
            "description": "Show text indicating there are no suggestions - defined in this.options.emptyText",
            "itemtype": "method",
            "name": "showEmptyText",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1005,
            "description": "Fetch suggestions from an ajax URL",
            "itemtype": "method",
            "name": "fetchResults",
            "params": [
                {
                    "name": "text",
                    "description": "The text to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The jQuery XHR transport that is fetching the data",
                "type": "JqXHR"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1028,
            "description": "Edit settings before ajax request is sent",
            "itemtype": "event",
            "name": "BeforeAjax",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings sent to $.ajax()",
                    "type": "Object"
                },
                {
                    "name": "term",
                    "description": "The term for which we will search",
                    "type": "String"
                }
            ],
            "ifcancelled": "Ajax is not run and this._afterFetch is run",
            "example": [
                "\n\t\t\t \n\tinstance.bind('BeforeAjax', function(event) {\n\t\tevent.settings.timeout = 5000;\n\t\tstartSpinner(event.term);\n\t});\t\t\t \n\t\t\t "
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1053,
            "description": "Access the jqXHR after initiating the ajax call but before it returns",
            "itemtype": "event",
            "name": "AfterAjax",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings sent to $.ajax()",
                    "type": "Object"
                },
                {
                    "name": "term",
                    "description": "The term which was searched",
                    "type": "String"
                },
                {
                    "name": "jqXHR",
                    "description": "The jquery XMLHttpRequest object",
                    "type": "JqXHR"
                }
            ],
            "example": [
                "\n\t\t\t \n\tinstance.bind('AfterAjax', function(event) {\n\t\tevent.jqXHR.done(stopSpinner);\t\n\t});\n\t\t\t "
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1073,
            "description": "Cancel the XHR. Used when user starts typing again before XHR completes",
            "itemtype": "method",
            "name": "abortFetch",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1085,
            "description": "Take the given records and build and display suggestion box. Usually only called internally.",
            "itemtype": "method",
            "name": "handleSuggestions",
            "params": [
                {
                    "name": "records",
                    "description": "The result records to use to build the suggestion list",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1105,
            "description": "Modify suggestion box behavior before it opens",
            "itemtype": "event",
            "name": "BeforeSuggest",
            "params": [
                {
                    "name": "text",
                    "description": "The text that was searched for",
                    "type": "String"
                }
            ],
            "ifprevented": "The suggestion list is built but not displayed",
            "example": [
                "\n\n\tinstance.bind('BeforeSuggest', function(event) {\n\t\tif (evt.text == 'dont suggest') {\n\t\t\tevent.preventDefault(); // suggest box will not open\n\t\t}\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1127,
            "description": "Fires after displaying suggestions",
            "itemtype": "event",
            "name": "AfterSuggest",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1134,
            "description": "Return true if suggestion box is open",
            "itemtype": "method",
            "name": "isSuggestBoxOpen",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1142,
            "description": "Manually open the suggestion box in whatever state it is. Usually only called internally.",
            "itemtype": "method",
            "name": "openSuggestBox",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1170,
            "description": "Fires before suggestion box is displayed",
            "itemtype": "event",
            "name": "BeforeOpen",
            "ifprevented": "Box is not displayed",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1189,
            "description": "Fires after suggestion box is displayed",
            "itemtype": "event",
            "name": "AfterOpen",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1196,
            "description": "Hide the suggestion box",
            "itemtype": "method",
            "name": "closeSuggestBox",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1204,
            "description": "Fired before suggestion box is hidden",
            "itemtype": "event",
            "name": "BeforeClose",
            "ifprevented": "Suggestion box will stay open",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1216,
            "description": "Fired after suggestion box is hidden",
            "itemtype": "event",
            "name": "AfterClose",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1223,
            "description": "Focus cursor on text input box",
            "itemtype": "method",
            "name": "focus",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1237,
            "description": "Unfocus the cursor from the text input box",
            "itemtype": "method",
            "name": "blur",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1251,
            "description": "Return true if cursor is focused on input box",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1258,
            "description": "Get suggestion result records given some text (local data)",
            "itemtype": "method",
            "name": "getResults",
            "params": [
                {
                    "name": "text",
                    "description": "Gather suggestions based on this text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of Objects of matching records",
                "type": "Array"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1267,
            "description": "Called before the search for results",
            "itemtype": "event",
            "name": "BeforeFilter",
            "params": [
                {
                    "name": "text",
                    "description": "The text to search for",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n\tinstance.bind('BeforeFilter', function(event) {\n\t\t// remove all special characters from input text\n\t\tevent.text = event.text.replace(/[^\\w ]/g, '');\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1315,
            "description": "Called after the search for results",
            "itemtype": "event",
            "name": "AfterFilter",
            "params": [
                {
                    "name": "text",
                    "description": "The that was searched for",
                    "type": "String"
                },
                {
                    "name": "results",
                    "description": "The array of records that matched (writeable)",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\n\tinstance.bind('AfterFilter', function(event) {\n\t\t// add a result onto the beginning\n\t\tevent.results.unshift({value:'Search the web for \"' + event.text '\"');\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1334,
            "description": "Clear all the chosen tags",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1344,
            "description": "Get a collection of all the chosen tag objects (a shallow copy of this.tags)",
            "itemtype": "method",
            "name": "getTags",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1352,
            "description": "Iterate through each of the chosen tag objects",
            "itemtype": "method",
            "name": "eachTag",
            "params": [
                {
                    "name": "iterator",
                    "description": "The iterator function - function(i, tag) {}",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1363,
            "description": "Return a URL query string representing the hidden values of the input",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1375,
            "description": "Pluck all the tag values from the chosen tags",
            "itemtype": "method",
            "name": "getValues",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1387,
            "description": "Get the current value as a comma-delimited string",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1395,
            "description": "Set the tags using an array or a comma-delimited string.\nCommas inside the tag name may be escaped with a backslash.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "valueOrValues",
                    "description": "To clear value, set to empty string, false, null or undefined",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1456,
            "description": "Helper function for setValue()",
            "itemtype": "method",
            "name": "_handleEmptyValue",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1470,
            "description": "Set the widget's CSS theme - Adds a class \"sugg-theme-%name%\" to the widget",
            "itemtype": "method",
            "name": "setTheme",
            "params": [
                {
                    "name": "themeName",
                    "description": "The name of the theme to use",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1485,
            "description": "Replace the contents of this.$input with the placeholder value. Automatically fires when this.options.placeholder is set\nAnd there are no tags and we are blurring or initially rendering",
            "itemtype": "method",
            "name": "showPlaceholder",
            "params": [
                {
                    "name": "text",
                    "description": "The text to set for the placeholder (defaults to this.options.placeholder)",
                    "type": "String",
                    "optional": true,
                    "optdefault": "this.options.placeholder"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1502,
            "description": "Replace placeholder string with empty text",
            "itemtype": "method",
            "name": "hidePlaceholder",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1514,
            "description": "Publish the given event name and send the given data",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event to publish",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Additional data to attach to the event object",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The event object which behaves much like a DOM event object",
                "type": "jQuery.Event"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1530,
            "description": "Get this instance. Useful for jQuery-style usage:  var instance = $('input').suggester(options).suggester('getInstance')",
            "itemtype": "method",
            "name": "getInstance",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1538,
            "description": "Set options and interpret options",
            "itemtype": "method",
            "name": "_processOptions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "options",
                    "description": "Settings passed to constructor",
                    "type": "Object"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1551,
            "description": "Render the widget and get handles to key elements",
            "itemtype": "method",
            "name": "_render",
            "access": "private",
            "tagname": "",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1559,
            "description": "Modify this.$widget or any of its child elements before it is manipulated or appended. Can be used to modify this.options.template with DOM methods. Note that it fires during instantiation, so an onBeforeRender property must be set in the constructor.",
            "itemtype": "event",
            "name": "BeforeRender",
            "params": [
                {
                    "name": "widget",
                    "description": "A reference to this.$widget",
                    "type": "JQuery"
                }
            ],
            "example": [
                "\n\t\t\t \n\tnew $.Suggester($input, {\n\t\tonBeforeRender: function(event) {\n\t\t\tevent.widget.find('.sugg-remove').text('').appendChild(myRemoveImage);\n\t\t}\n\t});\t\t\t\n\t\t\t "
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1629,
            "description": "Do something after the widget is completely rendered. Note that it fires during instantiation, so an onAfterRender property must be set in the constructor.",
            "itemtype": "event",
            "name": "AfterRender",
            "params": [
                {
                    "name": "widget",
                    "description": "A reference to this.$widget",
                    "type": "JQuery"
                }
            ],
            "example": [
                "\n\t\t\t \n\tnew $.Suggester($input, {\n\t\tonAfterRender: function(event) {\n\t\t\theyItsAllRendered();\n\t\t}\n\t});\n\t\t\t "
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1646,
            "description": "Look at the initial element's start value and populate tags as appropriate",
            "itemtype": "method",
            "name": "_handleStartValue",
            "access": "private",
            "tagname": "",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1664,
            "description": "Attach event handlers",
            "itemtype": "method",
            "name": "_setupListeners",
            "access": "private",
            "tagname": "",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1696,
            "description": "Event handler for when this.$input is focused",
            "itemtype": "method",
            "name": "_onInputFocus",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The focus event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1717,
            "description": "Respond after input box has focused",
            "itemtype": "event",
            "name": "AfterFocus",
            "params": [
                {
                    "name": "event",
                    "description": "The focus event",
                    "type": "jQuery.Event"
                }
            ],
            "example": [
                "      \n\n\tinstance.bind('AfterFocus', function(event) {\n\t\t$searchHints.show();\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1732,
            "description": "Event handler for when this.$input is blurred",
            "itemtype": "method",
            "name": "_onInputBlur",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "blur event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1739,
            "description": "Respond after user clicks or tabs out of input box",
            "itemtype": "event",
            "name": "BeforeBlur",
            "params": [
                {
                    "name": "event",
                    "description": "The blur event",
                    "type": "jQuery.Event"
                },
                {
                    "name": "value",
                    "description": "The current value in the input box. Changing it will change the effictive value.",
                    "type": "String"
                }
            ],
            "ifprevented": "Input box remains focused",
            "example": [
                "      \n\n\tinstance.bind('BeforeBlur', function(event) {\n\t\tif (evt.value.match(/\\d{16}/)) {\n\t\t\talert('Detected a credit card number. Scrubbing...');\n\t\t\tevent.value = '**** ' + evt.value.substring(12);\n\t\t}\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1766,
            "description": "Respond after input box has blurred",
            "itemtype": "event",
            "name": "AfterBlur",
            "params": [
                {
                    "name": "event",
                    "description": "The blur event",
                    "type": "jQuery.Event"
                },
                {
                    "name": "value",
                    "description": "The current value in the input box",
                    "type": "String"
                },
                {
                    "name": "newTag",
                    "description": "The new tag or undefined if the tag was not added on blur",
                    "type": "JQuery|undefined"
                }
            ],
            "example": [
                "      \n\n\tinstance.bind('AfterBlur', function(event) {\n\t\tif (!event.$newTag) {\n\t\t\t$history.append('<p>You typed \"' + event.value + '\" but did not add it as a tag.</p>');\n\t\t}\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1806,
            "description": "Event handler for when .sugg-remove is clicked",
            "itemtype": "method",
            "name": "_onTagRemoveClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1819,
            "description": "Event handler for when .sugg-tag is clicked",
            "itemtype": "method",
            "name": "_onTagClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1834,
            "description": "Event handler for when autosuggest list is moused over",
            "itemtype": "method",
            "name": "_onListMouseover",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The mouseover event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1855,
            "description": "Event handler for when autosuggest list is clicked",
            "itemtype": "method",
            "name": "_onListClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1883,
            "description": "Event handler for when this.$box is clicked",
            "itemtype": "method",
            "name": "_onBoxClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1895,
            "description": "Handle keypresses while in tag input field",
            "itemtype": "method",
            "name": "_onKeydown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event (a raw browser event, not jQuery.Event)",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1902,
            "description": "Access the keydown event before Suggester processes it",
            "itemtype": "event",
            "name": "BeforeHandleKey",
            "params": [
                {
                    "name": "keydown",
                    "description": "The keydown event (a raw browser event, not jQuery.Event)",
                    "type": "Event"
                }
            ],
            "ifprevented": "Key is not handled by Suggester. You may want to call event.keydown.preventDefault();",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1947,
            "description": "Access the keydown event after Suggester processes it",
            "itemtype": "event",
            "name": "AfterHandleKey",
            "params": [
                {
                    "name": "keydown",
                    "description": "The keydown event (a raw browser event, not jQuery.Event)",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1956,
            "description": "Handle cut and delete on this.$input",
            "itemtype": "method",
            "name": "_onCutDelete",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The cut, paste, or delete event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1966,
            "description": "Handle paste on this.$input. Look for places to split pasted value\nFor example pasting \"a, b, c\" will immediately add 3 tags (when this.options.addOnComma is true)\nIt attempts to split on tab, then if there are no tabs then semicolons, then if there are no semicolons, commas",
            "itemtype": "method",
            "name": "_onPaste",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "the paste event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2003,
            "description": "Respond before values are pasted",
            "itemtype": "event",
            "name": "BeforePaste",
            "params": [
                {
                    "name": "event",
                    "description": "The paste event",
                    "type": "jQuery.Event"
                },
                {
                    "name": "value",
                    "description": "The raw value that was pasted",
                    "type": "String"
                },
                {
                    "name": "tags",
                    "description": "The array of tags to be added (if the value was successfully split on tab, semicolon, or comma). If changed, the added tags will change.",
                    "type": "Array"
                }
            ],
            "ifprevented": "tags are not added and paste is cancelled",
            "example": [
                "      \n\n\tinstance.bind('BeforePaste', function(event) {\n\t\tif (event.tags.length > 1 && !confirm('Did you mean to paste ' + event.tags.length + ' items?\\n\\nClick OK to continue. Click cancel to treat it as one item.')) {\n\t\t\tthis.$input.val(event.value);\n\t\t\tevent.preventDefault();\n\t\t}\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2040,
            "description": "Respond after values are pasted",
            "itemtype": "event",
            "name": "AfterPaste",
            "params": [
                {
                    "name": "event",
                    "description": "The paste event",
                    "type": "jQuery.Event"
                },
                {
                    "name": "value",
                    "description": "The raw value that was pasted",
                    "type": "String"
                },
                {
                    "name": "tags",
                    "description": "The array of tags that were added (if the value was successfully split on tab, semicolon, or comma)",
                    "type": "Array"
                }
            ],
            "example": [
                "      \n\n\tinstance.bind('AfterPaste', function(event) {\n\t\tif (event.tags.length > 1) {\n\t\t\talert('You pasted ' + event.tags.length + ' tags');\n\t\t}\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2061,
            "description": "Handle UP key on this.$input",
            "itemtype": "method",
            "name": "_key_UP",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2074,
            "description": "Handle DOWN key on this.$input",
            "itemtype": "method",
            "name": "_key_DOWN",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2089,
            "description": "Handle BACKSPACE key on this.$input",
            "itemtype": "method",
            "name": "_key_BACKSPACE",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2117,
            "description": "Handle TAB and COMMA and SEMICOLON key on this.$input",
            "itemtype": "method",
            "name": "_key_TAB_COMMA",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2143,
            "description": "Handle ESC key on this.$input",
            "itemtype": "method",
            "name": "_key_ESC",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2152,
            "description": "Handle ENTER key on this.$input",
            "itemtype": "method",
            "name": "_key_ENTER",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2174,
            "description": "Handle other keys (e.g. printable characters) on this.$input",
            "itemtype": "method",
            "name": "_key_other",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2192,
            "description": "Handler for form submission",
            "itemtype": "method",
            "name": "_onSubmit",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "jqEvent",
                    "description": "The submit event",
                    "type": "JQuery"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2199,
            "description": "Respond before form is submitted and before Suggester adds on submit",
            "itemtype": "event",
            "name": "BeforeSubmit",
            "params": [
                {
                    "name": "The",
                    "description": "jQuery-wrapped browser event",
                    "type": "jQuery.Event"
                },
                {
                    "name": "form",
                    "description": "The input's form (same as this.$form)",
                    "type": "HTMLFormElement"
                }
            ],
            "ifprevented": "Form will not be submitted",
            "example": [
                "      \n\n\tinstance.bind('BeforeSubmit', function(event) {\n\t\tif (this.$input.val() !== '' && !confirm('Are you sure you want to submit this form unfinished?')) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2235,
            "description": "The handler function that is passed to $.ajax({beforeSend:...}) to alter XHR if needed",
            "itemtype": "method",
            "name": "_beforeFetch",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "The jQuery XHR object (see http://api.jquery.com/jQuery.ajax/#jqXHR)",
                    "type": "JqXHR"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2242,
            "description": "A chance to access the jqXHR before the ajax request has been sent",
            "itemtype": "event",
            "name": "BeforeFetch",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "the jQuery XHR object (see http://api.jquery.com/jQuery.ajax/#jqXHR)",
                    "type": "JqXHR"
                },
                {
                    "name": "term",
                    "description": "the term that is being searched for",
                    "type": "String"
                }
            ],
            "ifprevented": "XHR is aborted",
            "example": [
                "\n\n\tinstance.bind('BeforeFetch', function(event) {\n\t\tevent.jqXHR.setRequestHeader('something','something');\n\t\tevent.jqXHR.fail(function() {\n\t\t\talert('ajax call failed');\n\t\t}).always(function() {\n\t\t\talert('ajax call finished regardless of success or failure');\n\t\t});\n\t});\n\t\t\t"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2270,
            "description": "Handler passed to $.ajax().done(function(){...}) that handles suggestion data that is returned",
            "itemtype": "method",
            "name": "_afterFetch",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "records",
                    "description": "The Array of record objects returned from the XHR",
                    "type": "Array"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2277,
            "itemtype": "event",
            "name": "AfterFetch",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "The jQuery XHR object (see http://api.jquery.com/jQuery.ajax/#jqXHR)",
                    "type": "JqXHR"
                },
                {
                    "name": "records",
                    "description": "The Array of record objects returned from the XHR",
                    "type": "Object[]"
                },
                {
                    "name": "term",
                    "description": "The term that was search for",
                    "type": "String"
                }
            ],
            "ifprevented": "Nothing is done with results (i.e. suggestion box is not built and displayed)",
            "example": [
                "\n\n\tinstance.bind('AfterFetch', function(event) {\n\t\tevent.data.push({value:'', label:'Adding a test suggestion at the end'});\n\t});\n\t\t\t"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2302,
            "description": "Callback used to close the suggestion box when the user clicks off of it",
            "itemtype": "method",
            "name": "_closeOnOutsideClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2315,
            "description": "Format a suggestion before display",
            "itemtype": "method",
            "name": "_formatSuggestion",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "record",
                    "description": "The record that was suggested",
                    "type": "Object"
                },
                {
                    "name": "substr",
                    "description": "The string that generated the list of suggestions",
                    "type": "String"
                }
            ],
            "return": {
                "description": "HTML to use as the item (e.g. '<li class=\"sugg-item\">Suggestion</li>')",
                "type": "String"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2325,
            "description": "Call to dynamically inject your own formatting on each suggestion",
            "itemtype": "event",
            "name": "BeforeFormat",
            "params": [
                {
                    "name": "record",
                    "description": "The record object that is being suggested",
                    "type": "Object"
                },
                {
                    "name": "substr",
                    "description": "The part of the string that matches the suggestion search fields",
                    "type": "String"
                },
                {
                    "name": "html",
                    "description": "If you set event.html, it will be used instead of constructing the HTML",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n\tinstance.bind('BeforeFormat', function(event) {\n\t\tevent.html = '<li>' + event.record.label.toUpperCase() + '</li>';\n\t});              \n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2361,
            "description": "Alter the HTML that has been constructed before it is put into the DOM",
            "itemtype": "event",
            "name": "AfterFormat",
            "params": [
                {
                    "name": "record",
                    "description": "The record object that is being suggested",
                    "type": "Object"
                },
                {
                    "name": "substr",
                    "description": "The part of the string that matches the suggestion search fields",
                    "type": "String"
                },
                {
                    "name": "html",
                    "description": "Change the HTML before it is put into the dom",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n\tinstance.bind('AfterFormat', function(event) {\n\t\tevent.html; // <li><strong class=\"sugg-match\">Canis</strong> Major</li>\n\t\tevent.html = event.html.replace(/<\\/?strong\\b/, 'em');\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2382,
            "description": "Update the size when this.options.inputSize is \"auto\"",
            "itemtype": "method",
            "name": "_updateInputSize",
            "access": "private",
            "tagname": "",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2392,
            "description": "Set the value of the original input to a comma-delimited set of labels",
            "itemtype": "method",
            "name": "save",
            "return": {
                "description": "The new value",
                "type": "String"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2405,
            "description": "Inject functionality before saving",
            "itemtype": "event",
            "name": "BeforeSave",
            "params": [
                {
                    "name": "newValue",
                    "description": "The value that will be written to the original input (writeable)",
                    "type": "String"
                }
            ],
            "ifcancelled": "The original input will not be populated with the new value",
            "example": [
                "\n\n\tinstance.bind('BeforeSave', function(event) {\n\t\tevent.newValue += '!';\n\t});\n"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2429,
            "description": "Do something after saving value to original input",
            "itemtype": "event",
            "name": "AfterSave",
            "params": [
                {
                    "name": "oldValue",
                    "description": "The value before saving",
                    "type": "String"
                },
                {
                    "name": "newValue",
                    "description": "The value that was written to the original input",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n\tinstance.bind('AfterSave', function(event) {\n\t\tsaveToServer(event.newValue);\n\t});\n     "
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2447,
            "description": "Given tag text, remove a tag from the internal collection and from the DOM",
            "itemtype": "method",
            "name": "_spliceTag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "The text of the tag",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The record associated with that tag or undefined if not found",
                "type": "Object|undefined"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2461,
            "description": "Given an array index, remove a tag from the internal collection and from the DOM",
            "itemtype": "method",
            "name": "_spliceTagByIdx",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "idx",
                    "description": "The index position in the internal collection",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Suggester.Tag object that was removed",
                "type": "Suggester.Tag"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2485,
            "description": "Find a tag given value",
            "itemtype": "method",
            "name": "getTagIndex",
            "params": [
                {
                    "name": "value",
                    "description": "The text of the tag",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The index position of the tag in the internal collection or -1 if not found",
                "type": "Number"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2501,
            "description": "Setup publish/subscribe system that uses jQuery's event system. Allows subscribing this way: instance.bind('AfterFilter', myhandler)",
            "itemtype": "method",
            "name": "_setupPubsub",
            "access": "private",
            "tagname": "",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2522,
            "description": "Given an input element, get the cursor position. Used to determine if backspace key should delete the previous tag",
            "itemtype": "method",
            "name": "_isCursorAtStart",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "true if the cursor is at the start and no text is selected",
                "type": "Boolean"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2561,
            "description": "Pass to contructor to subclass (e.g. `MySuggester.prototype = new $.Suggester($.Suggester.doSubclass)`)",
            "var": "{Object}",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2566,
            "description": "A collection of all the instances",
            "itemtype": "property",
            "name": "instances",
            "type": "Array",
            "static": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2572,
            "description": "Add data to all instances",
            "itemtype": "method",
            "name": "addData",
            "static": 1,
            "params": [
                {
                    "name": "data",
                    "description": "Add more data to all the registered instances",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2585,
            "description": "Set data for all registered instances",
            "params": [
                {
                    "name": "data",
                    "description": "Set the data for all the registered instances",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2596,
            "description": "Lightweight event handler to allow keydown to have less overhead (i.e. bypass jQuery's event system)",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2613,
            "description": "Create a subclass of Suggester",
            "itemtype": "method",
            "name": "subclass",
            "static": 1,
            "params": [
                {
                    "name": "jQueryMethodName",
                    "description": "The method name to add to jQuery.fn",
                    "type": "String"
                },
                {
                    "name": "properties",
                    "description": "Additional properties and methods to add to subclass",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The new class object",
                "type": "Function"
            },
            "example": [
                "\n\n\tvar MySuggester = $.Suggester.subclass('mysuggester', {\n\t\tinitialize: function($textInput, options) {\n\t\t\toptions = options || {};\n\t\t\tthis.options.myOption = options.myOptions || 'default';\n\t\t\tthis.callParent('initialize', $textInput, options);\n\t\t}\n\t});\n\t// now call $(selector).mysuggester(options);\n\t\t"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 2689,
            "description": "The Suggester to which this tag belongs",
            "itemtype": "property",
            "name": "suggester",
            "type": "Suggester",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2693,
            "description": "The value of the tag",
            "itemtype": "property",
            "name": "value",
            "type": "String",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2697,
            "description": "The display text if the tag",
            "itemtype": "property",
            "name": "label",
            "type": "String",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2701,
            "description": "The index relative to other tags",
            "itemtype": "property",
            "name": "index",
            "type": "Number",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2705,
            "description": "The hidden input element",
            "itemtype": "property",
            "name": "$hidden",
            "type": "JQuery",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2709,
            "description": "The tag elements",
            "itemtype": "property",
            "name": "$tag",
            "type": "JQuery",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2713,
            "description": "The record corresponding to this tag, if any",
            "itemtype": "property",
            "name": "",
            "type": "Object|undefined",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2718,
            "description": "Get the Suggester widget to which this tag belongs",
            "itemtype": "method",
            "name": "getWidget",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2726,
            "description": "Remove this tag from the tag collection",
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": "",
                "type": "Suggester.Tag"
            },
            "chainable": 1,
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2736,
            "description": "Get thee index of this tag relative to others",
            "itemtype": "method",
            "name": "getIndex",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2744,
            "description": "Get the hidden value of this tag",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2752,
            "description": "Set the hidden value of this tag",
            "params": [
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester.Tag"
            },
            "chainable": 1,
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2767,
            "description": "Get the visible label of this tag",
            "itemtype": "method",
            "name": "getLabel",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2775,
            "description": "Set the visibile label of this tag",
            "itemtype": "method",
            "name": "setLabel",
            "return": {
                "description": "",
                "type": "Suggester.Tag"
            },
            "chainable": 1,
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2786,
            "description": "Get the hidden value of the tag",
            "itemtype": "method",
            "name": "getHidden",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2794,
            "description": "Get the tag element",
            "itemtype": "method",
            "name": "getElement",
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2802,
            "description": "Get the record that generated this tag, if any",
            "return": {
                "description": "",
                "type": "Object|undefined"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:144"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:456"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:595"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:698"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:719"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:759"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:837"
        },
        {
            "message": "unknown tag: ifcancelled",
            "line": " src/Suggester.js:1028"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:1105"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:1170"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:1204"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/Suggester.js:1251"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/Suggester.js:1456"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:1538"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:1739"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:1902"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:2003"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:2199"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:2242"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:2277"
        },
        {
            "message": "unknown tag: ifcancelled",
            "line": " src/Suggester.js:2405"
        },
        {
            "message": "unknown tag: var",
            "line": " src/Suggester.js:2561"
        },
        {
            "message": "Missing item type\nReturn true if cursor is focused on input box",
            "line": " src/Suggester.js:1251"
        },
        {
            "message": "Missing item type\nPass to contructor to subclass (e.g. `MySuggester.prototype = new $.Suggester($.Suggester.doSubclass)`)",
            "line": " src/Suggester.js:2561"
        },
        {
            "message": "Missing item type\nSet data for all registered instances",
            "line": " src/Suggester.js:2585"
        },
        {
            "message": "Missing item type\nLightweight event handler to allow keydown to have less overhead (i.e. bypass jQuery's event system)",
            "line": " src/Suggester.js:2596"
        },
        {
            "message": "Missing item type\nSet the hidden value of this tag",
            "line": " src/Suggester.js:2752"
        },
        {
            "message": "Missing item type\nGet the record that generated this tag, if any",
            "line": " src/Suggester.js:2802"
        }
    ]
}