{
    "project": {
        "name": "Suggester",
        "description": "Turn a text input into a Facebook-style multiple-tag input. Lots of options and event hooks.",
        "version": "1.1.0",
        "url": "https://github.com/kensnyder/jQuery-Suggester"
    },
    "files": {
        "src/Suggester.js": {
            "name": "src/Suggester.js",
            "modules": {
                "jQuery": 1
            },
            "classes": {
                "Suggester": 1,
                "Suggester.Tag": 1
            },
            "fors": {},
            "namespaces": {
                "Suggester": 1
            }
        }
    },
    "modules": {
        "jQuery": {
            "name": "jQuery",
            "submodules": {},
            "classes": {
                "Suggester": 1,
                "Suggester.Tag": 1
            },
            "fors": {},
            "namespaces": {
                "Suggester": 1
            },
            "tag": "module",
            "file": "src/Suggester.js",
            "line": 1959
        }
    },
    "classes": {
        "Suggester": {
            "name": "Suggester",
            "shortname": "Suggester",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jQuery",
            "namespace": "",
            "file": "src/Suggester.js",
            "line": 252,
            "is_constructor": 1,
            "example": [
                "\n\n\t// Instantiate the OOP way\n\tvar instance = new $.Suggester('selector', options)\n\t\t\n\t// Instantiate the jQuery way\n\t$('selector').suggester(options);\n\t// call methods on the instance\n\t$('selector').suggester('method', arg1, arg2);\n\t// initialize and get back instance\n\tvar instance = $('selector').suggester('getInstance');"
            ],
            "params": [
                {
                    "name": "$textInput",
                    "description": "The input element to convert into a widget",
                    "type": "String|jQuery|HTMLElement"
                },
                {
                    "name": "options",
                    "description": "See {{#crossLink \"Suggester/options:property\"}}options property{{/crossLink}} for full documentation",
                    "type": "Object"
                }
            ]
        },
        "Suggester.Tag": {
            "name": "Suggester.Tag",
            "shortname": "Suggester.Tag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jQuery",
            "namespace": "Suggester",
            "file": "src/Suggester.js",
            "line": 1959,
            "is_constructor": 1,
            "params": [
                {
                    "name": "properties",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "suggester",
                            "description": "The Suggester to which this tag belongs",
                            "type": "Suggester"
                        },
                        {
                            "name": "value",
                            "description": "The value of the tag",
                            "type": "String"
                        },
                        {
                            "name": "label",
                            "description": "The display text of the tag",
                            "type": "String"
                        },
                        {
                            "name": "index",
                            "description": "The index relative to other tags",
                            "type": "Number"
                        },
                        {
                            "name": "$hidden",
                            "description": "The hidden input element",
                            "type": "JQuery"
                        },
                        {
                            "name": "$tag",
                            "description": "The tag element",
                            "type": "JQuery"
                        },
                        {
                            "name": "record",
                            "description": "The record corresponding to this tag, if any",
                            "type": "Object|undefined"
                        }
                    ]
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "src/Suggester.js",
            "line": 25,
            "description": "Default options. Change these to globally change the default options\nSee {{#crossLink \"Suggester/constructor:method\"}}constructor{{/crossLink}} for documentation on each option",
            "itemtype": "property",
            "name": "defaultOptions",
            "static": 1,
            "type": "{Object}",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 84,
            "description": "The input used to make the widget",
            "itemtype": "property",
            "name": "$originalInput",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 88,
            "description": "The current options. Starts with value given in constructor",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "example": [
                "\n\t\n\t// EXAMPLE TEMPLATE CONFIG\t\t\n\t// change uls to divs and lis to spans\n\toptions.template = $.Suggester.defaultOptions.template\n\t\t.replace(/<(\\/)?ul/g, '<$1div')\n\t\t.replace(/<(\\/)?li/g, '<$1span')\n\t;\n\t// custom list item template\n\toptions.listItemTemplate = '<li class=\"sugg-item\">{record.lname}, {record.fname} ({record.email})</li>';\t\n\t"
            ],
            "class": "Suggester",
            "module": "jQuery",
            "subprops": [
                {
                    "name": "data",
                    "description": "Initial data to use for suggestions",
                    "type": "Array|Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "valueProperty",
                    "description": "The name of object property that should be used as the tag's value. Only applicable when options.data is set",
                    "type": "String",
                    "optional": true,
                    "optdefault": "value"
                },
                {
                    "name": "labelProperty",
                    "description": "The name of object property that should be used as the tag's display text. Only applicable when options.data is set",
                    "type": "String",
                    "optional": true,
                    "optdefault": "value"
                },
                {
                    "name": "searchProperties",
                    "description": "The array of object property names that should be searched when generating suggestions. Only applicable when options.data is set",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "Array(\"value\")"
                },
                {
                    "name": "matchAt",
                    "description": "Where to match when finding suggestions. It can be \"anywhere\", \"start\", \"end\" or an integer. Only applicable when options.data is set",
                    "type": "String|Number",
                    "optional": true,
                    "optdefault": "\"anywhere\""
                },
                {
                    "name": "caseSensitive",
                    "description": "If true, find matches regardless of case. Only applicable when options.data is set. Only applicable when options.data is set",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "dataUrl",
                    "description": "Url to call to get json or jsonp results. Use %s to indicate where search text should be inserted. e.g. \"http://example.com/myjson?query=%s\" or \"http://example.com/myjsonp?query=%s&callback=%s\"",
                    "type": "String",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "dataType",
                    "description": "Can be \"json\" or \"jsonp\". If json, options.dataUrl needs to be in the format \"http://example.com/myjsonp?query=%s&mycallback=%s\". To handle xml, you'll need to register BeforeFetch and AfterFetch handlers or overwrite the fetchResults method",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"json\""
                },
                {
                    "name": "fly",
                    "description": "Which way should the suggestion box fly. If \"up\", the suggestion box will appear before the input box in the DOM tree. A css class of \"sugg-fly-up\" or \"sugg-fly-down\" is applied to the widget element based on this value",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"down\""
                },
                {
                    "name": "suggListPosition",
                    "description": "If \"absolute\", the suggestion box will be appended to <body> and positioned and sized each time it is opened. This is useful for widgets within table elements",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"relative\""
                },
                {
                    "name": "multiselect",
                    "description": "If true, allow multiple tags",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "preventDuplicates",
                    "description": "If true, the first tag will be removed when a duplicate is typed in",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "omitAlreadyChosenItems",
                    "description": "If true, don't suggest items that have already been chosen as tags. Only applicable when options.data is set",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "minChars",
                    "description": "The minimum number of characters a user must type before the suggestion box will appear. If 0, show choices when input is simply focused (like a faux select widget)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "3"
                },
                {
                    "name": "keyDelay",
                    "description": "The number of milliseconds between keystrokes before the suggestion lookup begins",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "400"
                },
                {
                    "name": "addOnComma",
                    "description": "If true, typing a comma will add the current text as a tag",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "addOnTab",
                    "description": "If true, typing a tab will add the current text as a tag",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "addOnSemicolon",
                    "description": "If true, typing a semicolon will add the current text as a tag",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "addOnSubmit",
                    "description": "If true, add tag on submit if user has entered text but not typed comma or tab",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "addOnBlur",
                    "description": "If true, add tag on blur if user has entered text but not typed comma or tab",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "submitOnEnter",
                    "description": "If false, prevent the form from submitting when the user presses enter on the empty input",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "inputSize",
                    "description": "Manually set the input size property to a certain width. If auto, set size to text width",
                    "type": "String",
                    "optional": true,
                    "optdefault": "auto"
                },
                {
                    "name": "placeholder",
                    "description": "Placeholder text to display when no tags are present. e.g. \"Enter tags...\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "emptyText",
                    "description": "Message to show when there are no suggestions - default is \"(Type a comma to create a new item)\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "prompt",
                    "description": "Message to display in suggestion list when below min char length",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "maxSuggestions",
                    "description": "Only display this many suggestions",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "10"
                },
                {
                    "name": "addHiddenInputs",
                    "description": "If true, also add a hidden input for each tag (fieldname_tag[]) for easier server-side processing (See options.hiddenName to create a custom name)",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "hiddenName",
                    "description": "The name to use for hidden elements (defaults to the original input's name plus \"_tags[]\")",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "highlightSubstring",
                    "description": "If true, wrap first matching substring in each suggestion with <strong class=\"sugg-match\"></strong>",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "template",
                    "description": "The html used to generate the widget. You can add more markup, change tag names, or add css classes, but all the sugg-* classes need to remain. See below for default.\n\t\n\t<div class=\"sugg-widget\"> <!-- this.$widget -->\t\t\n\t\t<ul class=\"sugg-box\"> <!-- this.$box -->\n\t\t\t<li class=\"sugg-box-item sugg-tag\">  <!-- this.$tagTemplate -->\n\t\t\t\t<span class=\"sugg-label\">TAG TEXT GOES HERE</span><span class=\"sugg-remove\" title=\"Click to remove\">&times;</span>\n\t\t\t</li>\n\t\t\t<li class=\"sugg-box-item sugg-input-wrapper\"> <!-- this.$inputWrapper -->\n\t\t\t\t<input type=\"text\" class=\"sugg-input\" value=\"\" autocomplete=\"off\" /> <!-- this.$input -->\n\t\t\t</li>\n\t\t</ul>\n\t\t<div class=\"sugg-list-wrapper\">\n\t\t\t<ul class=\"sugg-list\" style=\"display:none\"> <!-- this.$suggList -->\n\t\t\t\t<li class=\"sugg-item {record.cssClass}\">{record.value}</li> <!-- innerHTML is used as this.listItemTemplate unless options.listItemTemplate is set -->\n\t\t\t\t<li class=\"sugg-empty\"></li> <!-- this.$empty -->\n\t\t\t\t<li class=\"sugg-prompt\"></li> <!-- this.$prompt -->\n\t\t\t</ul>\n\t\t</div>\n\t</div>",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "listItemTemplate",
                    "description": "Override the .sugg-item element in options.template",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "theme",
                    "description": "The css class to add to widget (e.g. \"sugg-theme-coolblue\"). The following themes come predefined in the CSS: \"coolblue\", \"faceblue\", \"graybox\", \"grayred\"",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"coolblue\""
                },
                {
                    "name": "onBeforeRender",
                    "description": "See the {{#crossLink \"Suggester/BeforeRender:event\"}}BeforeRender event{{/crossLink}}",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onInitialize",
                    "description": "See Suggester#initialize()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeHandleKey",
                    "description": "see Suggester#_onKeydown()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterHandleKey",
                    "description": "see Suggester#_onKeydown()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeAjax",
                    "description": "see Suggester#fetchResults()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeFetch",
                    "description": "see Suggester#_beforeFetch()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterFetch",
                    "description": "see Suggester#_afterFetch()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeMove",
                    "description": "see Suggester#moveSelection()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterMove",
                    "description": "see Suggester#moveSelection()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeSuggest",
                    "description": "see Suggester#handleSuggestions()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterSuggest",
                    "description": "see Suggester#handleSuggestions()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeOpen",
                    "description": "see Suggester#openSuggstBox()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterOpen",
                    "description": "see Suggester#openSuggestBox()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeClose",
                    "description": "see Suggester#closeSuggestBox()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterClose",
                    "description": "see Suggester#closeSuggestBox()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeFormat",
                    "description": "see Suggester#_formatSuggestion()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterFormat",
                    "description": "see Suggester#_formatSuggestion()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeFilter",
                    "description": "see Suggester#getResults()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterFilter",
                    "description": "see Suggester#getResults()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeAdd",
                    "description": "see Suggester#add()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterAdd",
                    "description": "see Suggester#add()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeRemove",
                    "description": "see Suggester#remove()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterRemove",
                    "description": "see Suggester#remove()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeSave",
                    "description": "see Suggester#save()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onAfterSave",
                    "description": "see Suggester#save()",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onBeforeSubmit",
                    "description": "see Suggester#_onSubmit()",
                    "type": "Function",
                    "optional": true
                }
            ]
        },
        {
            "file": "src/Suggester.js",
            "line": 180,
            "description": "Array of static data used instead of an ajax call",
            "itemtype": "property",
            "name": "data",
            "type": "Object[]",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 184,
            "description": "An array of Suggester.Tag objects",
            "itemtype": "property",
            "name": "tags",
            "type": "Suggester.Tag[]",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 188,
            "description": "The name to use for hidden elements (defaults to the original input's name plus \"_tags[]\")",
            "itemtype": "property",
            "name": "hiddenName",
            "type": "String",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 192,
            "description": "The tag that is selected for deletion",
            "itemtype": "property",
            "name": "$focusedTag",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 196,
            "description": "The item currently selected in the suggestion box",
            "itemtype": "property",
            "name": "$currentItem",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 200,
            "description": "The publish and subscribe handle - equal to $(this)",
            "itemtype": "property",
            "name": "pubsub",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 204,
            "description": "The element that wraps the widget",
            "itemtype": "property",
            "name": "$widget",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 208,
            "description": "The container that holds the chosen tags",
            "itemtype": "property",
            "name": "$box",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 212,
            "description": "The tag element that is cloned to make new tags",
            "itemtype": "property",
            "name": "$tagTemplate",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 216,
            "description": "The input that users type in",
            "itemtype": "property",
            "name": "$input",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 220,
            "description": "The container for the input",
            "itemtype": "property",
            "name": "$inputWrapper",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 224,
            "description": "The suggestion list element",
            "itemtype": "property",
            "name": "$suggList",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 228,
            "description": "The element that is positioned relatively to hold the absolutely positioned suggestion list",
            "itemtype": "property",
            "name": "$suggListWrapper",
            "type": "JQuery",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 232,
            "description": "The html to use for suggestion list items",
            "itemtype": "property",
            "name": "listItemTemplate",
            "type": "String",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 236,
            "description": "The search term we are currently searching for",
            "itemtype": "property",
            "name": "_searchTerm",
            "type": "String",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 240,
            "description": "The text in the input box that will be used to fetch results (i.e. what the user just typed)",
            "itemtype": "property",
            "name": "_text",
            "type": "String",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 244,
            "description": "The jQuery XHR object used initilized for fetching data - http://api.jquery.com/jQuery.ajax/#jqXHR",
            "itemtype": "property",
            "name": "_jqXHR",
            "type": "JqXHR",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 248,
            "description": "Called after widget is initialized and rendered",
            "itemtype": "event",
            "name": "Initialize",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 310,
            "description": "Completely remove Suggester widget and replace with original input box (with values populated)",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "keepHiddenInputs",
                            "description": "If true, append all hidden inputs after the original input",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The original input",
                "type": "JQuery"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 338,
            "description": "Add a tag by a record",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "value",
                    "description": "the tag to add",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "the text to display in the new tag",
                    "type": "String",
                    "optional": true,
                    "optdefault": "value"
                },
                {
                    "name": "$item",
                    "description": "Set internally when the record is added by choosing from the suggestion box",
                    "type": "JQuery",
                    "optional": true
                }
            ],
            "return": {
                "description": "The jQuery object containing the newly created label or undefined if one was not created",
                "type": "JQuery"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 352,
            "description": "Fired before a tag is added",
            "itemtype": "event",
            "name": "BeforeAdd",
            "params": [
                {
                    "name": "value",
                    "description": "The tag to be added",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "The value of the tag to be added",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "The suggestion that was chosen (if any)",
                    "type": "JQuery"
                },
                {
                    "name": "record",
                    "description": "The suggestion that was chosen (if any)",
                    "type": "Object"
                }
            ],
            "ifprevented": "The tag is not added",
            "example": [
                "       \n\tinstance.bind('BeforeAdd', function(event) {\n\t\tif (isSwearWord(evt.value)) {\n\t\t\tevent.preventDefault();\n\t\t\talert('Tags cannot be swear words');\n\t\t}\n\t});"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 409,
            "description": "Allows you to take action after a tag is added",
            "itemtype": "event",
            "name": "AfterAdd",
            "params": [
                {
                    "name": "item",
                    "description": "The suggestion that was chosen (if any)",
                    "type": "JQuery"
                },
                {
                    "name": "tag",
                    "description": "The jQuery element of the tag that was added",
                    "type": "JQuery"
                },
                {
                    "name": "hidden",
                    "description": "The hidden input that was generated",
                    "type": "JQuery"
                },
                {
                    "name": "value",
                    "description": "The value of the tag",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "The the label of the tag",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tinstance.bind('AfterAdd', function(event) {\n\t\t// fade in tag\n\t\tevent.tag.fadeIn(500);\n\t});"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 433,
            "description": "Add a tag with the contents of the input; e.g. when the user has typed something but clicks on another part of the form\nNote: this happens on blur when this.options.addOnBlur is true",
            "itemtype": "method",
            "name": "addCurrentBuffer",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 445,
            "description": "Move the selection up or down in the suggestion box",
            "itemtype": "method",
            "name": "moveSelection",
            "params": [
                {
                    "name": "direction",
                    "description": "Either \"up\" or \"down\"",
                    "type": "String",
                    "optional": true,
                    "optdefault": "up"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 462,
            "itemtype": "event",
            "name": "BeforeMove (if event.preventDefault() is called, movement is stopped)",
            "params": [
                {
                    "name": "direction",
                    "description": "\"up\" or \"down\"",
                    "type": "String"
                },
                {
                    "name": "current",
                    "description": "jQuery object with the currently selected item or null if there isn't one",
                    "type": "JQuery|null"
                },
                {
                    "name": "next",
                    "description": "jQuery object with the item that will be selected next",
                    "type": "JQuery|null"
                }
            ],
            "example": [
                "          instance.bind('BeforeMove', function(event) {\n                         alert('You are moving to ' + event.next.text());\n                     });"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 507,
            "description": "Select a suggestion",
            "itemtype": "method",
            "name": "selectItem",
            "params": [
                {
                    "name": "$tag",
                    "description": "",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 517,
            "description": "Deselect a suggestion",
            "itemtype": "method",
            "name": "deselectItem",
            "params": [
                {
                    "name": "$tag",
                    "description": "",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 527,
            "description": "Deselect all suggestions",
            "itemtype": "method",
            "name": "deselectAllItems",
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 537,
            "description": "Open suggestion list for the given text",
            "itemtype": "method",
            "name": "suggest",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 552,
            "description": "Add more data records to the autosuggest list. Does not apply when dataUrl is set",
            "itemtype": "method",
            "name": "addData",
            "params": [
                {
                    "name": "data",
                    "description": "More records in the same object format as initially set",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 572,
            "description": "Set data records to the autosuggest list. Does not apply when dataUrl is set",
            "itemtype": "method",
            "name": "setData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 583,
            "description": "Get all the records in the autosuggest list. Does not apply when dataUrl is set",
            "itemtype": "method",
            "name": "getData",
            "return": {
                "description": "",
                "type": "Object[]"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 591,
            "description": "Set the direction of the suggestion menu, to fly upwards or downwards",
            "itemtype": "method",
            "name": "setFlyDirection",
            "params": [
                {
                    "name": "direction",
                    "description": "either \"up\" or \"down\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 610,
            "description": "Focus on a previously added tag",
            "itemtype": "method",
            "name": "focusTag",
            "params": [
                {
                    "name": "$tag",
                    "description": "The .sugg-tag element to focus",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 623,
            "description": "Unfocus the previously focussed tag",
            "itemtype": "method",
            "name": "unfocusTag",
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 636,
            "description": "Remove the focused tag",
            "itemtype": "method",
            "name": "removeFocusedTag",
            "params": [
                {
                    "name": "evt",
                    "description": "(optional)  Used to check if $document keypress is backspace or delete",
                    "type": "jQuery.Event"
                }
            ],
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 653,
            "description": "Remove a tag given its text or jQuery element or HTML element",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "$tag",
                    "description": "the tag to remove",
                    "type": "String|jQuery|HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 693,
            "description": "Find a suggestion record by text",
            "itemtype": "method",
            "name": "findRecord",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 728,
            "description": "Initiate suggestion process if the input text is >= this.options.minChars\nOtherwise show prompt",
            "itemtype": "method",
            "name": "suggestIfNeeded",
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 747,
            "description": "Show the prompt text to give a hint to users\nOnly called when there are no items and this.options.prompt is truthy",
            "itemtype": "method",
            "name": "showPrompt",
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 762,
            "description": "Show text indicating there are no suggestions\nText is defined in this.options.emptyText",
            "itemtype": "method",
            "name": "showEmptyText",
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 777,
            "description": "Fetch suggestions from an ajax URL",
            "itemtype": "event",
            "name": "BeforeAjax - allows you to edit settings before ajax is sent!~YUIDOC_LINE~!example  instance.bind('BeforeAjax', function(event) );",
            "params": [
                {
                    "name": "text",
                    "description": "The text to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "JqXHR"
            },
            "type": "!~YUIDOC_LINE~!             event.settings.type = 'post';!~YUIDOC_LINE~!",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 813,
            "description": "Cancel the XHR. Used when user starts typing again before XHR completes",
            "itemtype": "method",
            "name": "abortFetch",
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 824,
            "description": "Take result records and build and display suggestion box",
            "itemtype": "event",
            "name": "AfterSuggest!~YUIDOC_LINE~!    example     instance.bind('AfterSuggest', function(event) );",
            "params": [
                {
                    "name": "text",
                    "description": "The text that was searched for\n    example     instance.bind('BeforeSuggest', function(event) \n                });",
                    "type": "!~YUIDOC_LINE~!                    if (evt.text == 'dont suggest') {!~YUIDOC_LINE~!                         event.preventDefault(); // suggest box will not open!~YUIDOC_LINE~!"
                }
            ],
            "type": "!~YUIDOC_LINE~!                    alert('Choose a suggested item if you like.');!~YUIDOC_LINE~!",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 864,
            "description": "Return true if suggestion box is open",
            "itemtype": "method",
            "name": "isSuggestBoxOpen",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 872,
            "description": "Manually open the suggestion box in whatever state it is",
            "itemtype": "event",
            "name": "AfterOpen\n    example  instance.one('AfterOpen', function(event) {\n         this.$suggList.css({\n           borderTopWidth: '10px',\n           borderTopColor: 'red'\n         });\n                 alert('Tip: You may choose an item from the suggestion list.');\n                 this.$suggList.css({\n           borderTopWidth: '0'\n         });\n             });",
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "chainable": 1,
            "type": "!~YUIDOC_LINE~!                 event.preventDefault();!~YUIDOC_LINE~!                 alert('No suggestions for you!');!~YUIDOC_LINE~!",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 933,
            "description": "Hide the suggestion list",
            "itemtype": "event",
            "name": "AfterClose\n    example  instance.bind('AfterClose', function(event) {\n                alert('You chose ' + instance.$currentItem.text());\n             });",
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "chainable": 1,
            "type": "!~YUIDOC_LINE~!                 event.preventDefault();!~YUIDOC_LINE~!                 window.location.href = '?page=' + instance.$currentItem.text();!~YUIDOC_LINE~!",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 960,
            "description": "Focus cursor on text input box",
            "itemtype": "method",
            "name": "focus",
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 971,
            "description": "Get suggestion result records given some text (local data)",
            "itemtype": "method",
            "name": "getResults",
            "params": [
                {
                    "name": "text",
                    "description": "Gather suggestions based on this text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of Objects of matching records",
                "type": "Array"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1018,
            "description": "Clear all the chosen tags",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1033,
            "description": "Get a collection of all the chosen tag objects",
            "itemtype": "method",
            "name": "getTags",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1041,
            "description": "Iterate through each of the chosen tag objects",
            "itemtype": "method",
            "name": "eachTag",
            "params": [
                {
                    "name": "iterator",
                    "description": "The iterator function - function(i, tag) {}",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1052,
            "description": "Return a URL query string representing the hidden values of the input",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1065,
            "description": "Pluck all the tag values from the chosen tags",
            "itemtype": "method",
            "name": "getValues",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1077,
            "description": "Set the widget's CSS theme - Adds a class \"sugg-theme-%name%\" to the widget",
            "itemtype": "method",
            "name": "setTheme",
            "params": [
                {
                    "name": "themeName",
                    "description": "The name of the theme to use",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "chainable": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1092,
            "description": "Publish the given event name and send the given data",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event to publish",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Additional data to attach to the event object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The event object which behaves much like a DOM event object",
                "type": "jQuery.Event"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1108,
            "description": "Get this instance. Useful for jQuery-style usage:  var instance = $('input').suggester(options).suggester('getInstance')",
            "itemtype": "method",
            "name": "getInstance",
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1116,
            "description": "Set options and interpret options",
            "itemtype": "method",
            "name": "_processOptions",
            "params": [
                {
                    "name": "options",
                    "description": "Settings passed to constructor",
                    "type": "Object"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1128,
            "description": "Render the widget and get handles to key elements",
            "itemtype": "method",
            "name": "_render",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1132,
            "description": "Fired after this.$widget is populated with this.options.template but before any sub elements are found",
            "itemtype": "event",
            "name": "BeforeRender",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1201,
            "description": "Look at the initial element's start value and populate tags as appropriate",
            "itemtype": "method",
            "name": "_handleStartValue",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1221,
            "description": "Attach event handlers",
            "itemtype": "method",
            "name": "_setupListeners",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1251,
            "description": "Event handler for when this.$input is focused",
            "itemtype": "method",
            "name": "_onInputFocus",
            "params": [
                {
                    "name": "evt",
                    "description": "The focus event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1272,
            "description": "Event handler for when this.$input is blurred",
            "itemtype": "method",
            "name": "_onInputBlur",
            "params": [
                {
                    "name": "evt",
                    "description": "blur event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1292,
            "description": "Event handler for when .sugg-remove is clicked",
            "itemtype": "method",
            "name": "_onTagRemoveClick",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1304,
            "description": "Event handler for when .sugg-tag is clicked",
            "itemtype": "method",
            "name": "_onTagClick",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1318,
            "description": "Event handler for when autosuggest list is moused over",
            "itemtype": "method",
            "name": "_onListMouseover",
            "params": [
                {
                    "name": "evt",
                    "description": "The mouseover event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1338,
            "description": "Event handler for when autosuggest list is clicked",
            "itemtype": "method",
            "name": "_onListClick",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1365,
            "description": "Event handler for when this.$box is clicked",
            "itemtype": "method",
            "name": "_onBoxClick",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1376,
            "description": "Handle keypresses while in tag input field",
            "itemtype": "method",
            "name": "_onKeydown",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1425,
            "description": "Handle paste on this.$input",
            "itemtype": "method",
            "name": "_onValueChange",
            "params": [
                {
                    "name": "evt",
                    "description": "The paste event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1434,
            "description": "Handle UP key on this.$input",
            "itemtype": "method",
            "name": "_key_UP",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1446,
            "description": "Handle DOWN key on this.$input",
            "itemtype": "method",
            "name": "_key_DOWN",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1460,
            "description": "Handle BACKSPACE key on this.$input",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1486,
            "description": "Handle TAB and COMMA and SEMICOLON key on this.$input",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1510,
            "description": "Handle ESC key on this.$input",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1517,
            "description": "Handle ENTER key on this.$input",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1537,
            "description": "Handle other keys (e.g. printable characters) on this.$input",
            "params": [
                {
                    "name": "evt",
                    "description": "The keydown event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1553,
            "description": "Handler for form submission",
            "params": [
                {
                    "name": "jqEvent",
                    "description": "The submit event",
                    "type": "JQuery"
                },
                {
                    "name": "event",
                    "description": "The jQuery-wrapped browser event"
                },
                {
                    "name": "form",
                    "description": "The input's form (same as this.$form)\n    example      instance.bind('BeforeSubmit', function(event) );",
                    "type": "!~YUIDOC_LINE~!                     // pretty much the same as instance.$form.submit(...)!~YUIDOC_LINE~!                     // used internally to add tag on submit if options.addOnSubmit is true!~YUIDOC_LINE~!"
                }
            ],
            "itemtype": "event",
            "name": "BeforeFetch (if event.preventDefault() is called, XHR is not made and suggest box does not open)",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1586,
            "description": "Handler passed to $.ajax({beforeSend:...}) to alter XHR if needed",
            "itemtype": "event",
            "name": "BeforeFetch (if event.preventDefault() is called, XHR is not made and suggest box does not open)",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "the jQuery XHR object (see http://api.jquery.com/jQuery.ajax/#jqXHR)"
                },
                {
                    "name": "term",
                    "description": "the term that is being searched for\n    example      instance.bind('BeforeFetch', function(event) ).always(function() {\n             alert('ajax call finished regardless of success or failure');\n                     });\n                 });",
                    "type": "!~YUIDOC_LINE~!                     event.jqXHR.setRequestHeader('something','something');!~YUIDOC_LINE~!                     event.jqXHR.fail(function() {!~YUIDOC_LINE~!                         alert('ajax call failed');!~YUIDOC_LINE~!"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1612,
            "description": "Handler passed to $.ajax().done(function(){...}) that handles suggestion data that is returned",
            "itemtype": "event",
            "name": "BeforeFetch (if event.preventDefault() is called, the suggest box does not open)",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "the jQuery XHR object (see http://api.jquery.com/jQuery.ajax/#jqXHR)"
                },
                {
                    "name": "records",
                    "description": "the object generated from the ajax returned from the XHR"
                },
                {
                    "name": "term",
                    "description": "the term that was search for\n    example        instance.bind('AfterFetch', function(event) );\n                   });",
                    "type": "!~YUIDOC_LINE~!                        event.data.push({id:'', label:'Adding a test suggestion'"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1636,
            "description": "Callback used to close the suggestion box when the user clicks off of it",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event",
                    "type": "jQuery.Event"
                }
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1647,
            "description": "Format a suggestion before display",
            "params": [
                {
                    "name": "record",
                    "description": "The record that was suggested",
                    "type": "Object"
                },
                {
                    "name": "substr",
                    "description": "The string that generated the list of suggestions",
                    "type": "String"
                },
                {
                    "name": "record",
                    "description": "The record object that is being suggested"
                },
                {
                    "name": "substr",
                    "description": "The part of the string that matches the suggestion search fields"
                },
                {
                    "name": "html",
                    "description": "If you set event.html and then call event.preventDefault(), that html will be used instead of the default generated html\n    example       instance.bind('BeforeFormat', function(event) );",
                    "type": "!~YUIDOC_LINE~!                      event.preventDefault();!~YUIDOC_LINE~!                      event.html = '<li>My suggestion html</li>';!~YUIDOC_LINE~!"
                },
                {
                    "name": "record",
                    "description": "The record object that is being suggested"
                },
                {
                    "name": "substr",
                    "description": "The part of the string that matches the suggestion search fields"
                },
                {
                    "name": "html",
                    "description": "Another chance to alter the html of the item after it has been generated\n    example       instance.bind('AfterFormat', function(event) );",
                    "type": "!~YUIDOC_LINE~!                      event.preventDefault();!~YUIDOC_LINE~!                      event.html; // <li><strong class=\"sugg-match\">Canis</strong> Major</li>!~YUIDOC_LINE~!                      event.html = event.html.replace(/<\\/?strong\\b/, 'em'),!~YUIDOC_LINE~!"
                }
            ],
            "return": {
                "description": "HTML to use as the item (e.g. '<li class=\"sugg-item\">Suggestion</li>')",
                "type": "String"
            },
            "itemtype": "event",
            "name": "AfterFormat - able to alter the html after it has be constructed",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1706,
            "description": "Update the size when this.options.inputSize is \"auto\"",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1714,
            "description": "Set the value of the original input to a comma-delimited set of labels",
            "return": {
                "description": "",
                "type": "jQuery.Suggester"
            },
            "itemtype": "event",
            "name": "AfterSave\n    example  instance.bind('AfterSave', function(event) {\n                 saveToServer(event.newValue);\n             });",
            "type": "!~YUIDOC_LINE~!                 event.newValue += '!';!~YUIDOC_LINE~!",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1746,
            "description": "Given tag text, remove a tag from the internal collection and from the DOM",
            "params": [
                {
                    "name": "value",
                    "description": "The text of the tag",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The record associated with that tag",
                "type": "Object"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1759,
            "description": "Given an array index, remove a tag from the internal collection and from the DOM",
            "params": [
                {
                    "name": "idx",
                    "description": "The index position in the internal collection",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The record associated with that tag",
                "type": "Object"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1781,
            "description": "Find a tag given value",
            "params": [
                {
                    "name": "value",
                    "description": "The text of the tag",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The index position of the tag in the internal collection or -1 if not found",
                "type": "Number"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1797,
            "description": "Setup publish/subscribe system that uses jQuery's event system\nExample event subscription:\ninstance.bind('AfterFilter', myhandler)",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1818,
            "description": "Given an input element, get the cursor position. Used to determine if backspace key should delete the previous tag",
            "return": {
                "description": "true if the cursor is at the start and no text is selected",
                "type": "Boolean"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1856,
            "description": "Pass to contructor to subclass (e.g. `MySuggester.prototype = new $.Suggester($.Suggester.doSubclass)`)",
            "var": "{Object}",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1861,
            "description": "A collection of all the instances",
            "itemtype": "property",
            "name": "instances",
            "type": "Array",
            "static": 1,
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1867,
            "description": "Add data to all instances",
            "itemtype": "method",
            "name": "addData",
            "static": 1,
            "params": [
                {
                    "name": "data",
                    "description": "Add more data to all the registered instances",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1880,
            "description": "Lightweight event handler to allow keydown to have less overhead",
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1897,
            "description": "Create a subclass of jQuery.Suggester",
            "static": 1,
            "params": [
                {
                    "name": "jQueryMethodName",
                    "description": "The method name to add to jQuery.fn",
                    "type": "String"
                },
                {
                    "name": "properties",
                    "description": "Properties and methods to add to subclass",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The new class object",
                "type": "Function"
            },
            "example": [
                "\n    var MySuggester = $.Suggester.subclass('mysuggester', {\n        initialize: function($textInput, options) {\n            options = options || {};\n            this.options.myOption = options.myOptions || 'default';\n            this.callParent('initialize', $textInput, options);\n        }\n    });"
            ],
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1930,
            "description": "Suggester jQuery Plugin",
            "params": [
                {
                    "name": "options",
                    "description": "The options to use on instantiation (see jQuery.Suggester.defaultOptions for info on options)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Suggester",
            "module": "jQuery"
        },
        {
            "file": "src/Suggester.js",
            "line": 1975,
            "description": "The Suggester to which this tag belongs",
            "itemtype": "property",
            "name": "suggester",
            "type": "Suggester",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 1979,
            "description": "The value of the tag",
            "itemtype": "property",
            "name": "value",
            "type": "String",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 1983,
            "description": "The display text if the tag",
            "itemtype": "property",
            "name": "label",
            "type": "String",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 1987,
            "description": "The index relative to other tags",
            "itemtype": "property",
            "name": "index",
            "type": "Number",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 1991,
            "description": "The hidden input element",
            "itemtype": "property",
            "name": "$hidden",
            "type": "JQuery",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 1995,
            "description": "The tag elements",
            "itemtype": "property",
            "name": "$tag",
            "type": "JQuery",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 1999,
            "description": "The record corresponding to this tag, if any",
            "itemtype": "property",
            "name": "",
            "type": "Object|undefined",
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2004,
            "description": "Get the Suggester widget to which this tag belongs",
            "itemtype": "method",
            "name": "getWidget",
            "return": {
                "description": "",
                "type": "Suggester"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2012,
            "description": "Remove this tag from the tag collection",
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": "",
                "type": "Suggester.Tag"
            },
            "chainable": 1,
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2022,
            "description": "Get thee index of this tag relative to others",
            "itemtype": "method",
            "name": "getIndex",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2030,
            "description": "Get the hidden value of this tag",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2038,
            "description": "Set the hidden value of this tag",
            "params": [
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Suggester.Tag"
            },
            "chainable": 1,
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2050,
            "description": "Get the visible label of this tag",
            "itemtype": "method",
            "name": "getLabel",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2058,
            "description": "Set the visibile label of this tag",
            "itemtype": "method",
            "name": "setLabel",
            "return": {
                "description": "",
                "type": "Suggester.Tag"
            },
            "chainable": 1,
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2069,
            "description": "Get the hidden value of the tag",
            "itemtype": "method",
            "name": "getHidden",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2077,
            "description": "Get the tag element",
            "itemtype": "method",
            "name": "getElement",
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        },
        {
            "file": "src/Suggester.js",
            "line": 2085,
            "description": "Get the record that generated this tag, if any",
            "return": {
                "description": "",
                "type": "Object|undefined"
            },
            "class": "Suggester.Tag",
            "module": "jQuery",
            "namespace": "Suggester"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:88"
        },
        {
            "message": "unknown tag: ifprevented",
            "line": " src/Suggester.js:352"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:552"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:572"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:610"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/Suggester.js:1116"
        },
        {
            "message": "unknown tag: var",
            "line": " src/Suggester.js:1856"
        },
        {
            "message": "Missing item type\nHandle BACKSPACE key on this.$input",
            "line": " src/Suggester.js:1460"
        },
        {
            "message": "Missing item type\nHandle TAB and COMMA and SEMICOLON key on this.$input",
            "line": " src/Suggester.js:1486"
        },
        {
            "message": "Missing item type\nHandle ESC key on this.$input",
            "line": " src/Suggester.js:1510"
        },
        {
            "message": "Missing item type\nHandle ENTER key on this.$input",
            "line": " src/Suggester.js:1517"
        },
        {
            "message": "Missing item type\nHandle other keys (e.g. printable characters) on this.$input",
            "line": " src/Suggester.js:1537"
        },
        {
            "message": "Missing item type\nCallback used to close the suggestion box when the user clicks off of it",
            "line": " src/Suggester.js:1636"
        },
        {
            "message": "Missing item type\nUpdate the size when this.options.inputSize is \"auto\"",
            "line": " src/Suggester.js:1706"
        },
        {
            "message": "Missing item type\nGiven tag text, remove a tag from the internal collection and from the DOM",
            "line": " src/Suggester.js:1746"
        },
        {
            "message": "Missing item type\nGiven an array index, remove a tag from the internal collection and from the DOM",
            "line": " src/Suggester.js:1759"
        },
        {
            "message": "Missing item type\nFind a tag given value",
            "line": " src/Suggester.js:1781"
        },
        {
            "message": "Missing item type\nSetup publish/subscribe system that uses jQuery's event system\nExample event subscription:\ninstance.bind('AfterFilter', myhandler)",
            "line": " src/Suggester.js:1797"
        },
        {
            "message": "Missing item type\nGiven an input element, get the cursor position. Used to determine if backspace key should delete the previous tag",
            "line": " src/Suggester.js:1818"
        },
        {
            "message": "Missing item type\nPass to contructor to subclass (e.g. `MySuggester.prototype = new $.Suggester($.Suggester.doSubclass)`)",
            "line": " src/Suggester.js:1856"
        },
        {
            "message": "Missing item type\nLightweight event handler to allow keydown to have less overhead",
            "line": " src/Suggester.js:1880"
        },
        {
            "message": "Missing item type\nCreate a subclass of jQuery.Suggester",
            "line": " src/Suggester.js:1897"
        },
        {
            "message": "Missing item type\nSuggester jQuery Plugin",
            "line": " src/Suggester.js:1930"
        },
        {
            "message": "Missing item type\nSet the hidden value of this tag",
            "line": " src/Suggester.js:2038"
        },
        {
            "message": "Missing item type\nGet the record that generated this tag, if any",
            "line": " src/Suggester.js:2085"
        }
    ]
}